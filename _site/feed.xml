<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>wanglizhen</title>
		<description>Welcome to wanglizhen 的主页! - iOS开发 iOS技术探讨 开发中的bug记录 微信小程序开发技术探讨与bug记录 前端 html、js、css 开发  IT技术探讨 共同学习 共同进步</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>快应用入门 与 常见问题</title>
				<description>&lt;p&gt;快应用出来好几天啦，今天才有时间好好看看，这里是&lt;a href=&quot;https://doc.quickapp.cn&quot;&gt;官方文档&lt;/a&gt;。环境搭建按照文档上说的来，但是他们要求安装6.0以上版本的NodeJS，又不能高于8.0版本，因为我是老早以前就安装了NodeJS，9.9的版本，也懒得降版本了，就凑活着用吧。&lt;/p&gt;

&lt;p&gt;安装hap-toolkit&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//创建项目
npm install -g hap-toolkit

//查看版本
hap -V

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;环境配置好，创建项目&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//创建项目
hap init Hello
//安装依赖
npm install

//编译出错
npm run build

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;错误提示&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gt&quot;&gt;
&amp;gt; Hello@1.0.0 build /Users/wanglizhen/Desktop/19Lou/qkapp/Hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; cross-env NODE_PLATFORM=na NODE_PHASE=dv webpack&lt;/span&gt;
    --config ./node_modules/hap-tools/webpack.config.js

module.js:545
throw err;
^

Error: Cannot find module '/Users/wanglizhen/Desktop/19Lou/qkapp/
    Hello/node_modules/hap-tools/webpack.config.js'
at Function.Module._resolveFilename (module.js:543:15)
at Function.Module._load (module.js:470:25)
at Module.require (module.js:593:17)
at require (internal/module.js:11:18)
at module.exports (/Users/wanglizhen/Desktop/19Lou/qkapp/
    Hello/node_modules/webpack/bin/convert-argv.js:80:13)
at Object.&lt;span class=&quot;nt&quot;&gt;&amp;lt;anonymous&amp;gt;&lt;/span&gt; (/Users/wanglizhen/Desktop/19Lou/qkapp/
    Hello/node_modules/webpack/bin/webpack.js:39:40)
at Module._compile (module.js:649:30)
at Object.Module._extensions..js (module.js:660:10)
at Module.load (module.js:561:32)
at tryModuleLoad (module.js:501:12)
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! Hello@1.0.0 build: &lt;span class=&quot;sb&quot;&gt;`cross-env NODE_PLATFORM=na NODE_PHASE=dv webpack
    --config ./node_modules/hap-tools/webpack.config.js`&lt;/span&gt;
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the Hello@1.0.0 build script.
npm ERR! This is probably not a problem with npm.
    There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/wanglizhen/.npm/_logs/2018-03-26T02_43_53_924Z-debug.log&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决方案：我看了下错误原因 发现项目下面缺少/node_modules/hap-tools/webpack.config.js文件，我进入目录查看了一下，原来连hap-tools目录都没有，于是我就手动装了一下&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
npm install hap-tools

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//再编译&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
npm run build

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//通过&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gt&quot;&gt;
&amp;gt; hello@1.0.0 build /Users/wanglizhen/Desktop/19Lou/qkapp/hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; cross-env NODE_PLATFORM=na NODE_PHASE=dv webpack&lt;/span&gt;
    --config ./node_modules/hap-tools/webpack.config.js

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 配置环境：{&quot;NODE_PLATFORM&quot;:&quot;na&quot;,&quot;NODE_PHASE&quot;:&quot;dv&quot;}
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; Build Time Cost: NaNs
Hash: 6965d809aaa352821c8f
Time: 1437ms
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; 15 hidden modules
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Loader ### 编译完成, 生成压缩包
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Loader ### 压缩包加签名
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Loader ### 自动刷新执行build :
&lt;span class=&quot;gt&quot;&gt;&amp;gt; hello@1.0.0 notify /Users/wanglizhen/Desktop/19Lou/qkapp/hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; node ./node_modules/hap-tools/debugger/command/notify.js&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//启动HTTP服务器&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
npm run server

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//搞定了&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gt&quot;&gt;
&amp;gt; hello@1.0.0 server /Users/wanglizhen/Desktop/19Lou/qkapp/hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; cross-env NODE_MOUNTED_ROUTER=&quot;debug bundle&quot;&lt;/span&gt;
node ./node_modules/hap-tools/debugger/server/index.js

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Server ### server started at http://localhost:12306/
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Server ### 请确保手机与App Server处于相同网段

生成HTTP服务器的二维码: http://172.16.115.231:12306
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
█ ▄▄▄▄▄ █▄▀▀▄▄█▄█ █ ▄▄▄▄▄ █
█ █   █ ███▄█  ▀▄██ █   █ █
█ █▄▄▄█ ██▄▀▄▀▀████ █▄▄▄█ █
█▄▄▄▄▄▄▄█ █ ▀▄▀ █▄█▄▄▄▄▄▄▄█
█  █▄ ▀▄██ ▄▄ ██ ▀▀▄█▀▀▀▀▄█
█▀ ▄█▀█▄  ▀ ▄▄▄ ▄  ▄ █ ▀▀ █
█ ▀▄▄▀▀▄█  █ ▀▀▄ █▄▄▀▀██▀▄█
█ ▄▀▄▀ ▄▄  ▀█ ▄█ ▄▄██▀▄ ▄ █
█▄█▄█▄▄▄▄▀▄█▄▀  █ ▄▄▄ █▄ ██
█ ▄▄▄▄▄ ██▄▀ ▀▀ █ █▄█ ▄█▀▄█
█ █   █ █ █▀▀▀██▄▄▄  ▄ █▀▀█
█ █▄▄▄█ █▀ ▄▄ █ ▀█▀▀▀ █   █
█▄▄▄▄▄▄▄█▄██▄██▄▄▄█▄██▄██▄█

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面就可以专心的的研究代码了&lt;/p&gt;

</description>
				<pubDate>Mon, 26 Mar 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/qkapp</link>
				<guid isPermaLink="true">http://localhost:4000/qkapp</guid>
			</item>
		
			<item>
				<title>基于CTMediator解耦</title>
				<description>&lt;p&gt;CTMediator 模块化开发用的还是比较多的，网上教程和讲解也是非常多的，我就不班门弄斧了，也不详细讲解原理了，只是简单记录一下样式和使用&lt;/p&gt;

&lt;h3 id=&quot;首先-创建target-action---继承自-nsobject-就行&quot;&gt;首先 创建Target-Action   继承自 NSObject 就行&lt;/h3&gt;

&lt;p&gt;Target_XXXXXX    这里的 XXXXXX 最好有意义，后面需要通过传入Target 的XXXXXX代码决定进入Target_XXXXXX类中执行方法，比如我下面的 Target_Home 是说这是首页的接口处理&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.h文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;

@interface Target_Home : NSObject

//获取首页对象
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_HomeViewController:(NSDictionary *&lt;/span&gt;)params;
//刷新首页方法
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)Action_refreshUpdate:(NSDictionary &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)params;

//获取另外页面对象
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_SecondViewController:(NSDictionary *&lt;/span&gt;)params;

@end&lt;span class=&quot;sb&quot;&gt;






&lt;/span&gt;.m文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &quot;Target_Home.h&quot;&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;#import &quot;HomeViewController.h&quot;&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;#import &quot;SecondViewController.h&quot;&lt;/span&gt;

@implementation Target_Home
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_HomeViewController:(NSDictionary *&lt;/span&gt;)params{
    HomeViewController &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;homeVC = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HomeViewController sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    return homeVC;
}
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)Action_refreshUpdate:(NSDictionary &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)params{
    HomeViewController &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;homeVC = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HomeViewController sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;homeVC refreshUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_SecondViewController:(NSDictionary *&lt;/span&gt;)params{&lt;span class=&quot;sb&quot;&gt;

    SecondViewController *SecondVC = [[SecondViewController alloc] init];
    //参数
    SecondVC.sId = [params objectForKey:@&quot;sId&quot;];
    return SecondVC;
&lt;/span&gt;}

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;创建-ctmediator-的分类&quot;&gt;创建 CTMediator 的分类&lt;/h3&gt;

&lt;p&gt;action 传入要执行的方法名 target中的方法名 都是以action为前缀的，这里的action前缀可以修改，这里不做过多解释&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.h文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &quot;CTMediator.h&quot;&lt;/span&gt;

@interface CTMediator (HomeComponent)
/&lt;span class=&quot;ge&quot;&gt;**&lt;/span&gt;
paramters 参数以字典样式传入
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
-(UIViewController&lt;span class=&quot;ge&quot;&gt;*)home_homeViewControllerWithParamters:(NSDictionary*&lt;/span&gt;)paramters;

/&lt;span class=&quot;ge&quot;&gt;**&lt;/span&gt;
刷新方法
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)home_refreshUpdate;

/&lt;span class=&quot;ge&quot;&gt;**&lt;/span&gt;
paramters 参数写清楚 必要参数和非必要参数
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
-(UIViewController&lt;span class=&quot;ge&quot;&gt;*)home_SecondViewControllerWithParamters:(NSDictionary*&lt;/span&gt;)paramters;

@end&lt;span class=&quot;sb&quot;&gt;







&lt;/span&gt;.m文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &quot;CTMediator+HomeComponent.h&quot;&lt;/span&gt;

@implementation CTMediator (HomeComponent)
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)home_homeViewControllerWithParamters:(NSDictionary *&lt;/span&gt;)paramters{
    return &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;self performTarget:@&quot;Home&quot;
    action:@&quot;HomeViewController&quot; params:paramters shouldCacheTarget:NO];
}
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)home_refreshUpdate{
    &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;self performTarget:@&quot;Home&quot;
    action:@&quot;refreshUpdate&quot; params:nil shouldCacheTarget:NO];
}
&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)home_SecondViewControllerWithParamters:(NSDictionary *&lt;/span&gt;)paramters{&lt;span class=&quot;sb&quot;&gt;

    return [self performTarget:@&quot;Home&quot;
    action:@&quot;SecondViewController&quot; params:paramters shouldCacheTarget:NO];
&lt;/span&gt;}

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;最终使用&quot;&gt;最终使用&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;gh&quot;&gt;#import &quot;CTMediator+HomeComponent.h&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)bButtonClick:(UIButton &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)sender {
    UIViewController &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;viewController = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[CTMediator sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    home_homeViewControllerWithParamters:@{@&quot;home_id&quot;:@&quot;123456&quot;}];
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self.navigationController pushViewController:viewController animated:YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用的好处 就是不用在各处包含#import “XXXX.h” 实现所有页面间的方法 通过路由层间接调用 实现解耦&lt;/p&gt;

</description>
				<pubDate>Sat, 24 Mar 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/iOS-target-action</link>
				<guid isPermaLink="true">http://localhost:4000/iOS-target-action</guid>
			</item>
		
			<item>
				<title>获取手机信息，节点位置，去除button样式 等常用操作</title>
				<description>&lt;h3 id=&quot;获取手机信息&quot;&gt;获取手机信息&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
wx.getSystemInfo({  
    success: function(res) {  
    console.log(res.model)  
    console.log(res.pixelRatio)  
    console.log(res.windowWidth)  
    console.log(res.windowHeight)  
    console.log(res.language)  
    console.log(res.version)  
    }  
})  

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;小程序获取-节点位置信息和滚动&quot;&gt;小程序获取 节点位置信息和滚动&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
var bindId = event.currentTarget.dataset.bindid;
var query = wx.createSelectorQuery()
    query.select('#scrollView' + bindId).boundingClientRect()
    query.exec(function (res) {
        wx.pageScrollTo({ //小程序滚动程序
        scrollTop: res&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;.top //距离现在定位的距离
    })
})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;button-去除原有样式&quot;&gt;button 去除原有样式&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 改样式
button{
    width: 100%;
    height: 100rpx;
    color: darkorange;
    text-align: left;
    background: #FFF; 
}
//　去边框
button::after{
    border: none;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;image自定义弹窗icon&quot;&gt;image自定义弹窗icon&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
wx.showToast({
    title: '成功',
    icon: 'success',
    image: '../image/warn.png',
    duration: 2000
})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;数组去空&quot;&gt;数组去空&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
for(var i = 0; i &amp;lt; array.length;i++){
    var obj = array&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    if (obj==null||obj==undefined){
        array.splice(i, 1)    
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;

&lt;p&gt;小程序的bug还是有点多的。textarea 下方有布局，弹起之后又可能会被键盘遮挡。placeholder 在键盘收起的时候，可能不会收回，发生错位。video、textarea 层级都是最高，不能通过z-index改变，不能用在scroll-view等视图中使用，video滑动会遮挡所有下面的视图。&lt;/p&gt;

</description>
				<pubDate>Wed, 14 Mar 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/js_wx_video</link>
				<guid isPermaLink="true">http://localhost:4000/js_wx_video</guid>
			</item>
		
			<item>
				<title>创建自己的Pods库</title>
				<description>&lt;p&gt;我们把自己的代码，全部分模块创建为了一个个库，为了模块化开发，后来发现，模块化开发真是好处多多，下一篇讲一下，模块化开发吧，这两片文章均摘自网络。本人怕原博主删掉博客或者因为网站原因找不到，特在此做了一个简单拷贝 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;amp;mid=2652551137&amp;amp;idx=3&amp;amp;sn=5a6a162a41c54be12b51c0390715c063&amp;amp;chksm=bcd2f2ef8ba57bf95f03ee0cec37516c091d80f1adaf875c98613acc34d9972c240d5a159823&amp;amp;mpshare=1&amp;amp;scene=23&amp;amp;srcid=0822HLLoDepjHMsV9bP1R468#rd&quot;&gt;原文出处&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建存储-podspec-后缀文件的-git-仓库&quot;&gt;创建存储 .podspec 后缀文件的 Git 仓库。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/01.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;记录第一个地址&quot;&gt;记录第一个地址。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/02.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建第二个用于存储代码的-git-仓库&quot;&gt;创建第二个用于存储代码的 Git 仓库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/03.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;记录第二个地址&quot;&gt;记录第二个地址。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/04.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;打开终端-到桌面&quot;&gt;打开终端 到桌面。&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
cd Desktop/

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;然后输入-pod-lib-create-lib-命令创建一个待上传的-lib-模版&quot;&gt;然后输入 pod lib create Lib 命令创建一个待上传的 Lib 模版&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod lib create Lib

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;然后输入邮箱&quot;&gt;然后输入邮箱&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
What is your email?

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;按找提示填写基础信息应该不用每个都解释了吧&quot;&gt;按找提示填写基础信息（应该不用每个都解释了吧）。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/05.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;完成之后-就可以在finder中看到如下&quot;&gt;完成之后 就可以在Finder中看到如下。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/06.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;配置-podspec-后缀文件&quot;&gt;配置 .podspec 后缀文件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/07.png&quot; alt=&quot;创建存储&quot; /&gt;
注意需要修改的地方一般有&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
s.version :  版本号(需跟后面打 Tag 的值相等)
s.summary : 描述(这个如果不修改，后面会出现问题。简单修改，不能超过 s.description 的文字长度，不然也会出问题)
s.homepage : 项目主页（第二个地址 去掉.git）
s.source : Git 仓库地址（第二个地址）
s.ios.deployment_target : 项目最低支持版本
s.source_files : 共享的代码目录
s.frameworks : 所依赖的系统库
s.dependency : 所依赖的第三方库

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;验证&quot;&gt;验证&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod lib lint

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;结果有两个警告 验证失败
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/08.png&quot; alt=&quot;创建存储&quot; /&gt;
于是我忽略了警告 重新验证 验证通过
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/09.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;上传远程仓库&quot;&gt;上传远程仓库&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//链接远程仓库
git remote add origin 第二个地址
//更新本地。（文件有冲突自己解决）
git pull origin master --allow-unrelated-histories

git add .
git commit -m 'Lib commit'
git push origin master

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;上传成功-查看&quot;&gt;上传成功 查看&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/10.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;验证文件有效性&quot;&gt;验证文件有效性&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod spec lint

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;发现tag值不对应
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/11.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同步tag值&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
git tag -a 0.1.0 -m '0.1.0标签'
git push origin master --tags

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同步成功
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/12.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其实也可以在这边后台手动添加tag
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/13.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;上传podspec到第一个远程仓库&quot;&gt;上传.podspec到第一个远程仓库&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod repo add MyPodspec 第一个创建的git仓库地址&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;查看本地库&quot;&gt;查看本地库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/14.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;向-mypodspec-远程仓库中提交-podspec-成功&quot;&gt;向 MyPodspec 远程仓库中提交 .podspec 成功&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod repo push MyPodspec Lib.podspec

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/15.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;可以用了-查一下试试&quot;&gt;可以用了 查一下试试&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod search Lib&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;结果真是日了狗了搜出来一大堆的库想偷懒一下起了这个名字最终还是把自己给坑到了&quot;&gt;结果真是日了狗了！！搜出来一大堆的库！！！想偷懒一下起了这个名字，最终还是把自己给坑到了。。。。。。&lt;/h2&gt;

</description>
				<pubDate>Fri, 23 Feb 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/my-pod</link>
				<guid isPermaLink="true">http://localhost:4000/my-pod</guid>
			</item>
		
			<item>
				<title>tabBar 、 navBarTitle 和常用window配置</title>
				<description>&lt;h3 id=&quot;动态改变navigationbartitle&quot;&gt;动态改变NavigationBarTitle(&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
wx.setNavigationBarTitle({
    title: &quot;动态title&quot;
}) 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;window常用配置&quot;&gt;window常用配置&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&quot;window&quot;: {
    &quot;backgroundTextStyle&quot;: &quot;light&quot;,
    &quot;navigationBarBackgroundColor&quot;: &quot;#d81e06&quot;,
    &quot;navigationBarTitleText&quot;: &quot;demo&quot;,
    &quot;navigationBarTextStyle&quot;: &quot;white&quot;,
    &quot;enablePullDownRefresh&quot;: true,
    &quot;disableScroll&quot;: true //禁止页面滚动

},

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;tabbar配置&quot;&gt;tabBar配置&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&quot;tabBar&quot;: {
    &quot;list&quot;: &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;
        {
            &quot;pagePath&quot;: &quot;pages/send/send&quot;,
            &quot;text&quot;: &quot;发红包&quot;,     
            &quot;iconPath&quot;: &quot;/style/images/hongbao_h.png&quot;,
            &quot;selectedIconPath&quot;: &quot;/style/images/hongbao.png&quot;
        },
        {
            &quot;pagePath&quot;: &quot;pages/myhome/myhome&quot;,
            &quot;text&quot;: &quot;我的&quot;,
            &quot;iconPath&quot;: &quot;/style/images/me_h.png&quot;,
            &quot;selectedIconPath&quot;: &quot;/style/images/me.png&quot;
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;跳转tabbar页面&quot;&gt;跳转tabBar页面&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
wx.switchTab({
    url: '../send/send'
});

//跳转之后，tabBar的文字默认是绿色的，如果想自定义颜色，可以在该页面onShow方法中修改
onShow: function () {&lt;span class=&quot;sb&quot;&gt;

    wx.setTabBarStyle({
        color: &quot;#000000&quot;,
        selectedColor: &quot;#d81e06&quot;,
    })

&lt;/span&gt;},

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Mon, 15 Jan 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/js_wx_tabbar</link>
				<guid isPermaLink="true">http://localhost:4000/js_wx_tabbar</guid>
			</item>
		
			<item>
				<title>微信小程序 小问题集结</title>
				<description>&lt;h3 id=&quot;小程序时间兼容ios版本&quot;&gt;小程序时间兼容iOS版本&lt;/h3&gt;
&lt;p&gt;我们有个需求，需要将服务器取到的时间再处理，在将字符串时间变为时间的时候，安卓手机是没问题的，但是iOS时间转换错误，原来iOS设备只能识别 ‘2017/02/21 11:23:56’ 这种时间格式，不能识别 ‘2017-02-21 11:23:56’ 这种格式，所以在转时间之前，需要先将时间字符串格式化一下，如有需要，再改回来就行了&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//改之前
var myDate = new Date(date)

//改之后
date = date.replace(/-/g, '/');
var myDate = new Date(date)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;持续更新中…….&lt;/p&gt;
</description>
				<pubDate>Sun, 05 Nov 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/wx_problem</link>
				<guid isPermaLink="true">http://localhost:4000/wx_problem</guid>
			</item>
		
			<item>
				<title>JS 数组 常用操作</title>
				<description>&lt;p&gt;JS 数组的常用操作&lt;/p&gt;

&lt;h3 id=&quot;常用方法&quot;&gt;常用方法&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//属性
constructor    返回对创建此对象的数组函数的引用。
length         设置或返回数组中元素的数目。
prototype      使您有能力向对象添加属性和方法。&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//方法
//concat()连接两个或更多的数组，并返回结果。
arrayObject.concat(arrayX,arrayX,......,arrayX)

//join()把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔，separator可以不填。
arrayObject.join(separator)

//unshift()    向数组的开头添加一个或更多元素，并返回新的长度。
arrayObject.unshift(newelement1,newelement2,....,newelementX)

//push()向数组的末尾添加一个或更多元素，并返回新的长度。
arrayObject.push(newelement1,newelement2,....,newelementX)

//shift()删除并返回数组的第一个元素
arrayObject.shift()

//pop()删除并返回数组的最后一个元素
arrayObject.pop()

//reverse()颠倒数组中元素的顺序。该方法会改变原来的数组，而不会创建新的数组。
arrayObject.reverse()

//sort()对数组的元素进行排序
arrayObject.sort(sortby)

//slice()从某个已有的数组返回选定的元素的新数组，start 必需，end 可选
arrayObject.slice(start,end)

//splice()删除元素，并向数组添加新元素。
arrayObject.splice(index,howmany,item1,.....,itemX)
arr.splice(2,0,&quot;William&quot;)  //从第三个开始，删除0个元素，并从第三个位置添加一个William

//toSource()返回该对象的源代码。
object.toSource()

//toString()把数组转换为字符串，并返回结果。返回值与没有参数的 join()方法返回的字符串相同。
arrayObject.toString()&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;不常用方法&quot;&gt;不常用方法&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//toLocaleString()把数组转换为本地数组，并返回结果。
arrayObject.toLocaleString()&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//valueOf()返回数组对象的原始值
arrayObject.valueOf()&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;实例-数组去重&quot;&gt;实例 数组去重&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
// 方法1
Array.prototype.unique = function(){ 
    var arr = &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;]; 
    for(var i=0,i=this.length;i&amp;lt;len;i++){ 
        if(arr.indexOf(this&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;) == -1){ 
            arr.push(this&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;);
        } 
    } 
    return arr; 
    
}; 
console.log(&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1,2,3,2,5,6,3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;.unique()); //&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1, 2, 3, 5, 6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//方法2
Array.prototype.unique = function(){ 
    var n = {}, 
    r=&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;]; //n为哈希表，r为临时数组
    //遍历当前数组 
    for(var i = 0; i &amp;lt; this.length; i++) { 
        //如果hash表中没有当前项 
        if (!n&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this[i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;]){ 
            n&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this[i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;] = true; //存入哈希表 
            r.push(this&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;); //把当前数组的当前项push到临时数组里面 
        } 
    } 
    return r; 
} 
console.log(&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1,2,3,2,5,6,3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;.unique());//&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1, 2, 3, 5, 6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//方法3
Array.prototype.unique = function(){ 
    var arr = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this[0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;];//结果数组 
    //从第二项开始遍历
    for(var i=1;i&amp;lt;this.length;i++){ 
        if(this.indexOf(this&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;) == i){ 
            //如果当前数组的第i项在当前数组中第一次出现的位置不是i，
                那么表示第i项是重复的，忽略掉。否则存入结果数组 
            arr.push(this&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;); 
        } 
    } 
    return arr; 
} 
console.log(&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1,2,3,4,2,3,4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;.unique());// &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1, 2, 3, 4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//方法4
var arr = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;4,5,3,2,3,4,5,1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;; 
function fn(num){ &lt;span class=&quot;sb&quot;&gt;

    var res = num.filter(function(item,index,array){
        //num.indexOf(item)将会返回元素在数组第一次出现的位置 
        return num.indexOf(item) === index;
        //对于多次出现的元素，除第一次外，其他情况都返回false 
    }); 
    return res; 
&lt;/span&gt;} 
console.log(fn(arr));//&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;4, 5, 3, 2, 1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//方法5
function unique(a) { 
    var obj = {}; 
    
    //filter会返回true的项组成的成员 
    return a.filter(function(item) {
        return obj.hasOwnProperty(item) ? false : (obj&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; = true); 
    }); 
} 

var a = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1, 1, 3, 2, 1, 2, 4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;; 
var res = unique(a); 
console.log(res); // &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1, 3, 2, 4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Sun, 22 Oct 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/array-js</link>
				<guid isPermaLink="true">http://localhost:4000/array-js</guid>
			</item>
		
			<item>
				<title>JS 字符串 常用操作</title>
				<description>&lt;p&gt;我觉得 任何一门编程语言，需要处理最多的，就是字符串和数组，所以这里把字符串和数组的常用操作总结一下，本篇只记录字符串的方法&lt;/p&gt;

&lt;h3 id=&quot;常用方法&quot;&gt;常用方法&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

var str=&quot;hello world&quot;; &lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//slice方法：第一个参数：子字符串开始位置，第二个参数：子字符串最后一个字符后面的位置 
console.log(str.slice(3,7));    //lo w  包含头不包含尾 
console.log(str.slice(3,-4));   //lo w  -4表示从后面向前4个长度的位置
console.log(str.slice(3));      //lo world 没有第二个参数，默认到字符串结尾

//substring方法：第一个参数：子字符串开始位置，第二个参数：子字符串最后一个字符后面的位置 
console.log(str.substring(3,7));    //lo w 
console.log(str.substring(3));      //lo world 
str.substring(3,0) == str.substring(0,3) //方法会将较小数作为开始位置较大数作为结束位置
str.substring(3,-4) == str.substring(3,0) == str.substring(0,3)

//substr方法：第一个参数：子字符串开始位置，第二个参数：返回的字符个数
console.log(str.substr(3,7));       //lo worl 7表示返回7个字符 
console.log(str.substr(3));         //lo world
console.log(str.substr(3,-4));      //&quot;&quot;空字符串 
            

//indexOf方法：是从字符串的开头向后搜索子字符串
console.log(str.indexOf(&quot;o&quot;,6));    //7  
console.log(str.indexOf(&quot;o&quot;));      //4 

//lastIndexOf方法：是从字符串的结尾向前搜索子字符串
console.log(str.lastIndexOf(&quot;o&quot;,6));//4 
console.log(str.lastIndexOf(&quot;o&quot;));  //7 

indexOf方法和lastIndexOf方法：都是从一个字符串中搜索给定的子字符串，并返回子字符串的位置；
        如果没有找到，则返回-1。这两个方法都可以接收两个参数：要查找的子字符串和查找的位置&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//trim方法：方法用来删除字符串前后的空格，并不会修改原字符串
var str=&quot;   hello world   &quot;; 
console.log('('+str.trim()+')');    //(hello world) 
console.log('('+str+')');           //(   hello world   ) &lt;span class=&quot;sb&quot;&gt;




&lt;/span&gt;//match方法：只接受一个参数，由字符串或RegExp对象指定的一个正则表达式 
var str=&quot;1 plus 2 equal 3&quot;
document.write(str.match(/&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;+/g))  //1，2，3

//search方法：只接受一个参数，由字符串或RegExp对象指定的一个正则表达式 
        search方法返回字符串中第一个匹配项的索引，如果没有匹配项，返回-1 
var str=&quot;cat,bat,sat,fat&quot;; 
var pattern=/.at/; 
var matches=str.match(pattern); 
console.log(matches.index);         //0 
console.log(matches&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;);            //cat 
console.log(pattern.lastIndex);     //0 lastIndex表示开始搜索下一个匹配项的字符位置
    从0算起 
var pos=str.search(/at/); 
console.log(pos);                   //1 1表示at字符串在原来字符串中第一次出现的位置&lt;span class=&quot;sb&quot;&gt;



&lt;/span&gt;//replace方法
var str=&quot;cat,bat,sat,fat&quot;; 
var res=str.replace(&quot;at&quot;,&quot;one&quot;);    //第一个参数是字符串，所以只会替换第一个子字符串 
console.log(res);//cone,bat,sat,fat 
var res1=str.replace(/at/g,&quot;one&quot;);  //第一个参数是正则表达式，所以会替换所有的子字符串 
console.log(res1);//cone,bone,sone,fone &lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//split 将字符串分割成字符串数组 
//如果把空字符串 (&quot;&quot;) 用作分割，那么 string 中的每个字符之间都会被分割。 
var str=&quot;red,blue,green,yellow&quot;; 
console.log(str.split(&quot;,&quot;));    //&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
console.log(str.split(&quot;,&quot;,2));  //&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;red&quot;, &quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  第二个参数用来限制数组大小

console.log(str.split(/&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;^\,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;+/));// &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;&quot;, &quot;,&quot;, &quot;,&quot;, &quot;,&quot;, &quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
//第一项和最后一项为空字符串是因为正则表达式指定的分隔符出现在了子字符串的开头，
    即&quot;red&quot;和&quot;yellow&quot; 。&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;^...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 表示不在方括号内的任意字符  只要不是逗号都是分隔符&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//localeCompare 这个方法用于比较两个字符串
/&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt;如果字符串在字母表中应该排在字符串参数之前，则返回一个负数 
&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt;如果字符串等于字符串参数，则返回0 
&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt;如果字符串在字母表中应该排在字符串参数之后，则返回一个正数 
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
var str=&quot;yellow&quot;; 
console.log(str.localeCompare(&quot;brick&quot;));//1 
console.log(str.localeCompare(&quot;yellow&quot;));//0 
console.log(str.localeCompare(&quot;zoo&quot;));//-1 &lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//字符串大小写转换方法
var str=&quot;HELLO world&quot;; 
console.log(str.toLowerCase());    //hello world 
console.log(str.toUpperCase());    //HELLO WORLD &lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//charAt方法是以单字符字符串的形式返回给定位置的那个字符 等同于下标。
    charCodeAt方法获取到的不是字符而是字符编码 
var str=&quot;hello&quot; 
str.charAt(1)       //e 
str&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;              //e 
str.charCodeAt(1)   //101 &lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//concat方法 和 + 操作一样，一般不用
var str=&quot;hello &quot;; 
var res=str.concat(&quot;world&quot;); 
console.log(res);               //hello world 
console.log(str);               //hello  原字符串的值未改变 
var res1=str.concat(&quot;nihao&quot;,&quot;!&quot;); 
console.log(res1);              //hello nihao!  concat方法可以接收任意多个参数 &lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;不常用方法&quot;&gt;不常用方法&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//fromCharCode方法 编码转字符串
/&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; 
fromCharCode方法是接收一或多个字符编码，然后将其转换为字符串 
fromCharCode方法是String构造函数的一个静态方法 
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
console.log(String.fromCharCode(104,101,108,108,111));  //hello &lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//找到匹配字符串所在的各个位置
var str=&quot;asadajhjkadaaasdasdasdasd&quot;; 
var position=&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;]; 
var pos=str.indexOf(&quot;d&quot;); 
while(pos&amp;gt;-1){ 
    position.push(pos); 
    pos=str.indexOf(&quot;d&quot;,pos+1); 
} 
console.log(position);          //&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;3, 10, 15, 18, 21, 24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//字符串去重
//String.split() 执行的操作与 Array.join 执行的操作是相反的 
//split() 方法用于把一个字符串分割成字符串数组。 
//join方法用于将字符串数组连接成一个字符串 

var str=&quot;aahhgggsssjjj&quot;;  //这里字符串没有可以分隔的字符，所以需要使用空字符串作为分隔符 
function unique(msg){ 
    var res=&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;]; 
    var arr=msg.split(&quot;&quot;); 
    //console.log(arr); 
    
    for(var i=0;i&amp;lt;arr.length;i++){ 
        if(res.indexOf(arr&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;)==-1){ 
            res.push(arr&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;); 
        } 
    }
    
    return res.join(&quot;&quot;); 
    
} 

console.log(unique(str));   //ahgsj &lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;json-和-字符串-相互转换&quot;&gt;json 和 字符串 相互转换&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//JSON字符串:
var str1 = '{ &quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: &quot;22&quot; }'; 
//JSON对象:
var str2 = { &quot;name&quot;: &quot;张三&quot;, &quot;sex&quot;: &quot;22&quot; };&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//由JSON字符串转换为JSON对象

var obj = eval('(' + str + ')');

或者

var obj = str.parseJSON();

或者

var obj = JSON.parse(str);&lt;span class=&quot;sb&quot;&gt;



&lt;/span&gt;//将JSON对象转化为JSON字符

var last=obj.toJSONString(); 

或者

var last=JSON.stringify(obj);&lt;span class=&quot;sb&quot;&gt;




&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Sat, 21 Oct 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/str-js</link>
				<guid isPermaLink="true">http://localhost:4000/str-js</guid>
			</item>
		
			<item>
				<title>微信小程序 文字溢出换行、各种引用 和 半透明浮层实现</title>
				<description>&lt;h3 id=&quot;多行限制-文字溢出换行-并显示-&quot;&gt;多行限制 文字溢出换行 并显示 …&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.board_list_content{&lt;span class=&quot;sb&quot;&gt;

    display: -webkit-box;
    word-break: break-all;
    text-overflow: ellipsis;
    overflow: hidden;
    ont-size: 32rpx;
    -webkit-box-orient: vertical;
    -webkit-line-clamp:4;
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;代码简介&quot;&gt;代码简介&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    white-space:nowrap;  //强制不换行
    
    text-overflow:ellipsis;//文字隐藏后添加省略号
    
    overflow:hidden; //超出文字自动隐藏

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;小程序当中的各种引用&quot;&gt;小程序当中的各种引用&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @import 'style/weui.wxss'; //wxss 样式引用
    
    var Api = require('../../utils/api.js') //js 引用
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;import&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;../../utils/loading.wxml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; // &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;引用
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;include&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login.wxml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; // 除&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;以外的其他标签引用

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;小程序浮层的实现&quot;&gt;小程序浮层的实现&lt;/h3&gt;

&lt;p&gt;首先添加触摸方法 方法什么都不用做 只是为了隔断事件传递用的&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;view&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'floatView'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;wx:if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;capture-catch:touchstart=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;doNothing&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/view&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再添加浮层的半透明属性、位置和层级就行了&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.floatView{
  width:100%; 
  height:100%;
  background-color:#000; 
  filter:alpha(opacity=50); 
  -moz-opacity:0.5; 
  opacity:0.5; 
  position:fixed; 
  left:0px; 
  top:90rpx; 
  z-index:1000;
  /&lt;span class=&quot;ge&quot;&gt;* overflow: hidden; *&lt;/span&gt;/
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Tue, 20 Jun 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/js_wx</link>
				<guid isPermaLink="true">http://localhost:4000/js_wx</guid>
			</item>
		
			<item>
				<title>苹果内购(IAP) 代码流程</title>
				<description>&lt;p&gt;苹果内购，整体来说不好用，支付速度特别慢，虚拟物品还要分成30%，但是虚拟物品在IOS平台上必须用苹果内购，没办法，只能用了。注册流程就不说了，简单说下代码实现流程。&lt;/p&gt;

&lt;p&gt;代码之前，请现在&lt;a href=&quot;https://itunesconnect.apple.com/login&quot;&gt;iTunes Connet&lt;/a&gt;操作，创建应用、创建商品、指定商品价格。注意事项：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1,Bundle ID一定不要搞错&lt;/li&gt;
  &lt;li&gt;2,商品分类（消耗品、不可消耗品、自动更新订阅品、非自动更新订阅品、免费订阅品）创建商品的时候一定要看清楚区别再创建。&lt;/li&gt;
  &lt;li&gt;3,产品id，（一般是字母、数字或下划线），购买商品就是要看产品id&lt;/li&gt;
  &lt;li&gt;4,设置税务和银行卡信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;以下是代码实现&quot;&gt;以下是代码实现&lt;/h3&gt;
&lt;p&gt;1，确认用户是否允许苹果内购&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//添加监听
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)viewDidLoad{
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;super viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKPaymentQueue defaultQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; addTransactionObserver:self];
}

//检查权限  _productId 建议从服务器获取 不建议硬编码
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)buyProdution:(UIButton &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)sender{
    if (&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SKPaymentQueue canMakePayments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;) {
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self toBuy:_productId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    } else {
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self showMessage:@&quot;用户禁止应用内付费购买&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    }
}

//结束之后移除监听
-(void)dealloc
{
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKPaymentQueue defaultQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; removeTransactionObserver:self];
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2，发起购买&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//查询用户购买的产品的信息
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)toBuy:(NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)productId {
    NSArray &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;product = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[NSArray alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; initWithObjects:productId, nil];
    NSSet &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;set = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NSSet setWithArray:product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    SKProductsRequest &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; request = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKProductsRequest alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    initWithProductIdentifiers:set];
    request.delegate = self;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;request start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self showHUD:@&quot;正在购买，请稍后&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}

//成功后的回调
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)productsRequest:(SKProductsRequest &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)request didReceiveResponse:
(SKProductsResponse &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)response {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self hideHUD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    NSArray &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;myProduct = response.products;
    if (myProduct.count == 0) {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self showMessage:@&quot;无产品信息&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    return;
    }
    SKPayment &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; payment = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SKPayment paymentWithProduct:myProduct[0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;];
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKPaymentQueue defaultQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; addPayment:payment];
}

//查询失败后的回调
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)request:(SKRequest &lt;span class=&quot;ge&quot;&gt;*)request didFailWithError:(NSError *&lt;/span&gt;)error {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self hideHUD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self showHUD:@&quot;查询失败&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    NSLog(@&quot;%@&quot;,error);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3，购买后的回调&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void)paymentQueue:(SKPaymentQueue &lt;span class=&quot;ge&quot;&gt;*)queue updatedTransactions:(NSArray *&lt;/span&gt;)
transactions {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self hideHUD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    for (SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;transaction in transactions)
    {
        switch (transaction.transactionState)
        {
        case SKPaymentTransactionStatePurchased://交易完成
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self completeTransaction:transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
        break;&lt;span class=&quot;sb&quot;&gt;

        case SKPaymentTransactionStateFailed://交易失败
            [self failedTransaction:transaction];
        break;

        case SKPaymentTransactionStateRestored://已经购买过该商品
            [self restoreTransaction:transaction];
        break;

        case SKPaymentTransactionStatePurchasing://商品添加进列表
            [self showMessage:@&quot;正在请求付费信息，请稍后&quot;];
        break;

        default:
        break;
    }
&lt;/span&gt;}

}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4，失败、恢复等操作&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void) failedTransaction: (SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)transaction{&lt;span class=&quot;sb&quot;&gt;

    if (transaction.error.code != SKErrorPaymentCancelled)
    {
        [self showHUD:@&quot;用户取消交易&quot;];
    }else{
        [self showHUD:@&quot;购买失败，请重试&quot;];
    }
    [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
    //购买失败 通知自己服务器
    [self doRequest:@&quot;failed&quot;];
&lt;/span&gt;}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void) restoreTransaction: (SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)transaction
{
    NSLog(@&quot;已经购买过该商品&quot;);
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKPaymentQueue defaultQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; finishTransaction:transaction];

}
//恢复购买 （非消耗品的时候 一定要有恢复购买）
-(void) paymentQueueRestoreCompletedTransactionsFinished:
(SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)transaction{
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self doRequest:@&quot;恢复数据&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}
-(void) paymentQueue:(SKPaymentQueue &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;) paymentQueue
restoreCompletedTransactionsFailedWithError:(NSError &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)error{
    NSLog(@&quot;error：%@&quot;， error);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4，购买成功&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void) completeTransaction: (SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)transaction
{
    //获取购买凭证
    NSData &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;receiptData = &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;NSData dataWithContentsOfURL:
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[NSBundle mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; appStoreReceiptURL]];
    NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;receiptStr = &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;receiptData base64EncodedStringWithOptions:
    NSDataBase64EncodingEndLineWithLineFeed];&lt;span class=&quot;sb&quot;&gt;

    //通知后台 结束购买
    NSString *productid = transaction.payment.productIdentifier;
    if ([productid length] &amp;gt; 0) {
    [self doPostReceipt:receiptStr withIndex:0];
    }
    [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;常见掉单问题&quot;&gt;常见掉单问题&lt;/h3&gt;
&lt;p&gt;苹果内购最常见问题，掉单。就是你在苹果付款成功，但是自己后台却不知道。我们的解决方法是，购买成功之后，本地记录凭证。通知后台，通知失败，再通知，往复三次。如果最终通知失败，可能因为网络等原因，凭证记录本地，下次启动app再往复通知，直至通知成功。通知成功之后，删掉本地凭证。当然后台也会做自己的判断&lt;/p&gt;

&lt;p&gt;在说一下我们记录和删除凭证吧&lt;/p&gt;

&lt;p&gt;4，记录删除凭证&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//保存交易凭证
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)saveReceipt:(NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)receiptStr{
    //沙盒/appleBuy/订单号.plist     tradeNo是后台生成的订单号
    NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;savedPath = &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;NSString stringWithFormat:@&quot;%@%@.plist&quot;,
    AppleBuyFilePath,&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;appleBuyDic objectForKey:@&quot;tradeNo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;];
    if (appleBuyDic!=nil) {
        NSDictionary &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;dic = @{
            @&quot;tradeNo&quot;:&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;appleBuyDic valueForKey:@&quot;tradeNo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;,
            @&quot;notifyUrl&quot;:&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;appleBuyDic valueForKey:@&quot;notifyUrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;,
            @&quot;receipt&quot;:receiptStr
        
        };
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dic writeToFile:savedPath atomically:YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    }
}

//删除交易凭证
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)deleteReceipt:(NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)tradeNo{&lt;span class=&quot;sb&quot;&gt;

    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSString *savedPath = [NSString stringWithFormat:@&quot;%@%@.plist&quot;,
    AppleBuyFilePath,tradeNo];
    if ([fileManager fileExistsAtPath:savedPath])
    {
        [fileManager removeItemAtPath:savedPath error:nil];
    }
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Fri, 12 May 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/apple-pay</link>
				<guid isPermaLink="true">http://localhost:4000/apple-pay</guid>
			</item>
		
	</channel>
</rss>
