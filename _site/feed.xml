<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>wanglizhen</title>
		<description>Welcome to wanglizhen 的主页! - iOS开发 iOS技术探讨 开发中的bug记录 微信小程序开发技术探讨与bug记录 前端 html、js、css 开发  IT技术探讨 共同学习 共同进步</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>快应用入门 与 常见问题</title>
				<description>&lt;p&gt;快应用出来好几天啦，今天才有时间好好看看，这里是&lt;a href=&quot;https://doc.quickapp.cn&quot;&gt;官方文档&lt;/a&gt;。环境搭建按照文档上说的来，但是他们要求安装6.0以上版本的NodeJS，又不能高于8.0版本，因为我是老早以前就安装了NodeJS，9.9的版本，也懒得降版本了，就凑活着用吧。&lt;/p&gt;

&lt;p&gt;安装hap-toolkit&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//创建项目
npm install -g hap-toolkit

//查看版本
hap -V

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;环境配置好，创建项目&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//创建项目
hap init Hello
//安装依赖
npm install

//编译出错
npm run build

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;错误提示&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gt&quot;&gt;
&amp;gt; Hello@1.0.0 build /Users/wanglizhen/Desktop/19Lou/qkapp/Hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; cross-env NODE_PLATFORM=na NODE_PHASE=dv webpack&lt;/span&gt;
    --config ./node_modules/hap-tools/webpack.config.js

module.js:545
throw err;
^

Error: Cannot find module '/Users/wanglizhen/Desktop/19Lou/qkapp/
    Hello/node_modules/hap-tools/webpack.config.js'
at Function.Module._resolveFilename (module.js:543:15)
at Function.Module._load (module.js:470:25)
at Module.require (module.js:593:17)
at require (internal/module.js:11:18)
at module.exports (/Users/wanglizhen/Desktop/19Lou/qkapp/
    Hello/node_modules/webpack/bin/convert-argv.js:80:13)
at Object.&lt;span class=&quot;nt&quot;&gt;&amp;lt;anonymous&amp;gt;&lt;/span&gt; (/Users/wanglizhen/Desktop/19Lou/qkapp/
    Hello/node_modules/webpack/bin/webpack.js:39:40)
at Module._compile (module.js:649:30)
at Object.Module._extensions..js (module.js:660:10)
at Module.load (module.js:561:32)
at tryModuleLoad (module.js:501:12)
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! Hello@1.0.0 build: &lt;span class=&quot;sb&quot;&gt;`cross-env NODE_PLATFORM=na NODE_PHASE=dv webpack
    --config ./node_modules/hap-tools/webpack.config.js`&lt;/span&gt;
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the Hello@1.0.0 build script.
npm ERR! This is probably not a problem with npm.
    There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/wanglizhen/.npm/_logs/2018-03-26T02_43_53_924Z-debug.log&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决方案：我看了下错误原因 发现项目下面缺少/node_modules/hap-tools/webpack.config.js文件，我进入目录查看了一下，原来连hap-tools目录都没有，于是我就手动装了一下&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
npm install hap-tools

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//再编译&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
npm run build

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//通过&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gt&quot;&gt;
&amp;gt; hello@1.0.0 build /Users/wanglizhen/Desktop/19Lou/qkapp/hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; cross-env NODE_PLATFORM=na NODE_PHASE=dv webpack&lt;/span&gt;
    --config ./node_modules/hap-tools/webpack.config.js

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 配置环境：{&quot;NODE_PLATFORM&quot;:&quot;na&quot;,&quot;NODE_PHASE&quot;:&quot;dv&quot;}
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; Build Time Cost: NaNs
Hash: 6965d809aaa352821c8f
Time: 1437ms
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; 15 hidden modules
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Loader ### 编译完成, 生成压缩包
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Loader ### 压缩包加签名
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Loader ### 自动刷新执行build :
&lt;span class=&quot;gt&quot;&gt;&amp;gt; hello@1.0.0 notify /Users/wanglizhen/Desktop/19Lou/qkapp/hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; node ./node_modules/hap-tools/debugger/command/notify.js&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//启动HTTP服务器&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
npm run server

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//搞定了&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gt&quot;&gt;
&amp;gt; hello@1.0.0 server /Users/wanglizhen/Desktop/19Lou/qkapp/hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; cross-env NODE_MOUNTED_ROUTER=&quot;debug bundle&quot;&lt;/span&gt;
node ./node_modules/hap-tools/debugger/server/index.js

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Server ### server started at http://localhost:12306/
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Server ### 请确保手机与App Server处于相同网段

生成HTTP服务器的二维码: http://172.16.115.231:12306
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
█ ▄▄▄▄▄ █▄▀▀▄▄█▄█ █ ▄▄▄▄▄ █
█ █   █ ███▄█  ▀▄██ █   █ █
█ █▄▄▄█ ██▄▀▄▀▀████ █▄▄▄█ █
█▄▄▄▄▄▄▄█ █ ▀▄▀ █▄█▄▄▄▄▄▄▄█
█  █▄ ▀▄██ ▄▄ ██ ▀▀▄█▀▀▀▀▄█
█▀ ▄█▀█▄  ▀ ▄▄▄ ▄  ▄ █ ▀▀ █
█ ▀▄▄▀▀▄█  █ ▀▀▄ █▄▄▀▀██▀▄█
█ ▄▀▄▀ ▄▄  ▀█ ▄█ ▄▄██▀▄ ▄ █
█▄█▄█▄▄▄▄▀▄█▄▀  █ ▄▄▄ █▄ ██
█ ▄▄▄▄▄ ██▄▀ ▀▀ █ █▄█ ▄█▀▄█
█ █   █ █ █▀▀▀██▄▄▄  ▄ █▀▀█
█ █▄▄▄█ █▀ ▄▄ █ ▀█▀▀▀ █   █
█▄▄▄▄▄▄▄█▄██▄██▄▄▄█▄██▄██▄█

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面就可以专心的的研究代码了&lt;/p&gt;

</description>
				<pubDate>Mon, 26 Mar 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/qkapp</link>
				<guid isPermaLink="true">http://localhost:4000/qkapp</guid>
			</item>
		
			<item>
				<title>基于CTMediator解耦</title>
				<description>&lt;p&gt;CTMediator 模块化开发用的还是比较多的，网上教程和讲解也是非常多的，我就不班门弄斧了，也不详细讲解原理了，只是简单记录一下样式和使用&lt;/p&gt;

&lt;h3 id=&quot;首先-创建target-action---继承自-nsobject-就行&quot;&gt;首先 创建Target-Action   继承自 NSObject 就行&lt;/h3&gt;

&lt;p&gt;Target_XXXXXX    这里的 XXXXXX 最好有意义，后面需要通过传入Target 的XXXXXX代码决定进入Target_XXXXXX类中执行方法，比如我下面的 Target_Home 是说这是首页的接口处理&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.h文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;

@interface Target_Home : NSObject

//获取首页对象
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_HomeViewController:(NSDictionary *&lt;/span&gt;)params;
//刷新首页方法
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)Action_refreshUpdate:(NSDictionary &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)params;

//获取另外页面对象
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_SecondViewController:(NSDictionary *&lt;/span&gt;)params;

@end&lt;span class=&quot;sb&quot;&gt;






&lt;/span&gt;.m文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &quot;Target_Home.h&quot;&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;#import &quot;HomeViewController.h&quot;&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;#import &quot;SecondViewController.h&quot;&lt;/span&gt;

@implementation Target_Home
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_HomeViewController:(NSDictionary *&lt;/span&gt;)params{
    HomeViewController &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;homeVC = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HomeViewController sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    return homeVC;
}
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)Action_refreshUpdate:(NSDictionary &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)params{
    HomeViewController &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;homeVC = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HomeViewController sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;homeVC refreshUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_SecondViewController:(NSDictionary *&lt;/span&gt;)params{&lt;span class=&quot;sb&quot;&gt;

    SecondViewController *SecondVC = [[SecondViewController alloc] init];
    //参数
    SecondVC.sId = [params objectForKey:@&quot;sId&quot;];
    return SecondVC;
&lt;/span&gt;}

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;创建-ctmediator-的分类&quot;&gt;创建 CTMediator 的分类&lt;/h3&gt;

&lt;p&gt;action 传入要执行的方法名 target中的方法名 都是以action为前缀的，这里的action前缀可以修改，这里不做过多解释&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.h文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &quot;CTMediator.h&quot;&lt;/span&gt;

@interface CTMediator (HomeComponent)
/&lt;span class=&quot;ge&quot;&gt;**&lt;/span&gt;
paramters 参数以字典样式传入
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
-(UIViewController&lt;span class=&quot;ge&quot;&gt;*)home_homeViewControllerWithParamters:(NSDictionary*&lt;/span&gt;)paramters;

/&lt;span class=&quot;ge&quot;&gt;**&lt;/span&gt;
刷新方法
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)home_refreshUpdate;

/&lt;span class=&quot;ge&quot;&gt;**&lt;/span&gt;
paramters 参数写清楚 必要参数和非必要参数
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
-(UIViewController&lt;span class=&quot;ge&quot;&gt;*)home_SecondViewControllerWithParamters:(NSDictionary*&lt;/span&gt;)paramters;

@end&lt;span class=&quot;sb&quot;&gt;







&lt;/span&gt;.m文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &quot;CTMediator+HomeComponent.h&quot;&lt;/span&gt;

@implementation CTMediator (HomeComponent)
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)home_homeViewControllerWithParamters:(NSDictionary *&lt;/span&gt;)paramters{
    return &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;self performTarget:@&quot;Home&quot;
    action:@&quot;HomeViewController&quot; params:paramters shouldCacheTarget:NO];
}
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)home_refreshUpdate{
    &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;self performTarget:@&quot;Home&quot;
    action:@&quot;refreshUpdate&quot; params:nil shouldCacheTarget:NO];
}
&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)home_SecondViewControllerWithParamters:(NSDictionary *&lt;/span&gt;)paramters{&lt;span class=&quot;sb&quot;&gt;

    return [self performTarget:@&quot;Home&quot;
    action:@&quot;SecondViewController&quot; params:paramters shouldCacheTarget:NO];
&lt;/span&gt;}

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;最终使用&quot;&gt;最终使用&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;gh&quot;&gt;#import &quot;CTMediator+HomeComponent.h&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)bButtonClick:(UIButton &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)sender {
    UIViewController &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;viewController = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[CTMediator sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    home_homeViewControllerWithParamters:@{@&quot;home_id&quot;:@&quot;123456&quot;}];
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self.navigationController pushViewController:viewController animated:YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用的好处 就是不用在各处包含#import “XXXX.h” 实现所有页面间的方法 通过路由层间接调用 实现解耦&lt;/p&gt;

</description>
				<pubDate>Sat, 24 Mar 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/iOS-target-action</link>
				<guid isPermaLink="true">http://localhost:4000/iOS-target-action</guid>
			</item>
		
			<item>
				<title>创建自己的Pods库</title>
				<description>&lt;p&gt;我们把自己的代码，全部分模块创建为了一个个库，为了模块化开发，后来发现，模块化开发真是好处多多，下一篇讲一下，模块化开发吧，这两片文章均摘自网络。本人怕原博主删掉博客或者因为网站原因找不到，特在此做了一个简单拷贝 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;amp;mid=2652551137&amp;amp;idx=3&amp;amp;sn=5a6a162a41c54be12b51c0390715c063&amp;amp;chksm=bcd2f2ef8ba57bf95f03ee0cec37516c091d80f1adaf875c98613acc34d9972c240d5a159823&amp;amp;mpshare=1&amp;amp;scene=23&amp;amp;srcid=0822HLLoDepjHMsV9bP1R468#rd&quot;&gt;原文出处&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建存储-podspec-后缀文件的-git-仓库&quot;&gt;创建存储 .podspec 后缀文件的 Git 仓库。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/01.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;记录第一个地址&quot;&gt;记录第一个地址。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/02.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建第二个用于存储代码的-git-仓库&quot;&gt;创建第二个用于存储代码的 Git 仓库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/03.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;记录第二个地址&quot;&gt;记录第二个地址。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/04.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;打开终端-到桌面&quot;&gt;打开终端 到桌面。&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
cd Desktop/

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;然后输入-pod-lib-create-lib-命令创建一个待上传的-lib-模版&quot;&gt;然后输入 pod lib create Lib 命令创建一个待上传的 Lib 模版&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod lib create Lib

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;然后输入邮箱&quot;&gt;然后输入邮箱&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
What is your email?

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;按找提示填写基础信息应该不用每个都解释了吧&quot;&gt;按找提示填写基础信息（应该不用每个都解释了吧）。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/05.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;完成之后-就可以在finder中看到如下&quot;&gt;完成之后 就可以在Finder中看到如下。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/06.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;配置-podspec-后缀文件&quot;&gt;配置 .podspec 后缀文件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/07.png&quot; alt=&quot;创建存储&quot; /&gt;
注意需要修改的地方一般有&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
s.version :  版本号(需跟后面打 Tag 的值相等)
s.summary : 描述(这个如果不修改，后面会出现问题。简单修改，不能超过 s.description 的文字长度，不然也会出问题)
s.homepage : 项目主页（第二个地址 去掉.git）
s.source : Git 仓库地址（第二个地址）
s.ios.deployment_target : 项目最低支持版本
s.source_files : 共享的代码目录
s.frameworks : 所依赖的系统库
s.dependency : 所依赖的第三方库

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;验证&quot;&gt;验证&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod lib lint

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;结果有两个警告 验证失败
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/08.png&quot; alt=&quot;创建存储&quot; /&gt;
于是我忽略了警告 重新验证 验证通过
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/09.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;上传远程仓库&quot;&gt;上传远程仓库&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//链接远程仓库
git remote add origin 第二个地址
//更新本地。（文件有冲突自己解决）
git pull origin master --allow-unrelated-histories

git add .
git commit -m 'Lib commit'
git push origin master

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;上传成功-查看&quot;&gt;上传成功 查看&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/10.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;验证文件有效性&quot;&gt;验证文件有效性&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod spec lint

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;发现tag值不对应
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/11.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同步tag值&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
git tag -a 0.1.0 -m '0.1.0标签'
git push origin master --tags

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同步成功
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/12.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其实也可以在这边后台手动添加tag
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/13.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;上传podspec到第一个远程仓库&quot;&gt;上传.podspec到第一个远程仓库&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod repo add MyPodspec 第一个创建的git仓库地址&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;查看本地库&quot;&gt;查看本地库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/14.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;向-mypodspec-远程仓库中提交-podspec-成功&quot;&gt;向 MyPodspec 远程仓库中提交 .podspec 成功&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod repo push MyPodspec Lib.podspec

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/15.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;可以用了-查一下试试&quot;&gt;可以用了 查一下试试&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod search Lib&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;结果真是日了狗了搜出来一大堆的库想偷懒一下起了这个名字最终还是把自己给坑到了&quot;&gt;结果真是日了狗了！！搜出来一大堆的库！！！想偷懒一下起了这个名字，最终还是把自己给坑到了。。。。。。&lt;/h2&gt;

</description>
				<pubDate>Fri, 23 Feb 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/my-pod</link>
				<guid isPermaLink="true">http://localhost:4000/my-pod</guid>
			</item>
		
			<item>
				<title>微信小程序 文字溢出换行、各种引用 和 半透明浮层实现</title>
				<description>&lt;h3 id=&quot;多行限制-文字溢出换行-并显示-&quot;&gt;多行限制 文字溢出换行 并显示 …&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.board_list_content{&lt;span class=&quot;sb&quot;&gt;

    display: -webkit-box;
    word-break: break-all;
    text-overflow: ellipsis;
    overflow: hidden;
    ont-size: 32rpx;
    -webkit-box-orient: vertical;
    -webkit-line-clamp:4;
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;代码简介&quot;&gt;代码简介&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    white-space:nowrap;  //强制不换行
    
    text-overflow:ellipsis;//文字隐藏后添加省略号
    
    overflow:hidden; //超出文字自动隐藏

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;小程序当中的各种引用&quot;&gt;小程序当中的各种引用&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @import 'style/weui.wxss'; //wxss 样式引用
    
    var Api = require('../../utils/api.js') //js 引用
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;import&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;../../utils/loading.wxml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; // &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;引用
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;include&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login.wxml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; // 除&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;以外的其他标签引用

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;小程序浮层的实现&quot;&gt;小程序浮层的实现&lt;/h3&gt;

&lt;p&gt;首先添加触摸方法 方法什么都不用做 只是为了隔断事件传递用的&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;view&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'floatView'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;wx:if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;capture-catch:touchstart=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;doNothing&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/view&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再添加浮层的半透明属性、位置和层级就行了&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.floatView{
  width:100%; 
  height:100%;
  background-color:#000; 
  filter:alpha(opacity=50); 
  -moz-opacity:0.5; 
  opacity:0.5; 
  position:fixed; 
  left:0px; 
  top:90rpx; 
  z-index:1000;
  /&lt;span class=&quot;ge&quot;&gt;* overflow: hidden; *&lt;/span&gt;/
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Tue, 20 Jun 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/js_wx</link>
				<guid isPermaLink="true">http://localhost:4000/js_wx</guid>
			</item>
		
			<item>
				<title>苹果内购(IAP) 代码流程</title>
				<description>&lt;p&gt;苹果内购，整体来说不好用，支付速度特别慢，虚拟物品还要分成30%，但是虚拟物品在IOS平台上必须用苹果内购，没办法，只能用了。注册流程就不说了，简单说下代码实现流程。&lt;/p&gt;

&lt;p&gt;代码之前，请现在&lt;a href=&quot;https://itunesconnect.apple.com/login&quot;&gt;iTunes Connet&lt;/a&gt;操作，创建应用、创建商品、指定商品价格。注意事项：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1,Bundle ID一定不要搞错&lt;/li&gt;
  &lt;li&gt;2,商品分类（消耗品、不可消耗品、自动更新订阅品、非自动更新订阅品、免费订阅品）创建商品的时候一定要看清楚区别再创建。&lt;/li&gt;
  &lt;li&gt;3,产品id，（一般是字母、数字或下划线），购买商品就是要看产品id&lt;/li&gt;
  &lt;li&gt;4,设置税务和银行卡信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;以下是代码实现&quot;&gt;以下是代码实现&lt;/h3&gt;
&lt;p&gt;1，确认用户是否允许苹果内购&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//添加监听
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)viewDidLoad{
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;super viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKPaymentQueue defaultQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; addTransactionObserver:self];
}

//检查权限  _productId 建议从服务器获取 不建议硬编码
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)buyProdution:(UIButton &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)sender{
    if (&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SKPaymentQueue canMakePayments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;) {
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self toBuy:_productId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    } else {
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self showMessage:@&quot;用户禁止应用内付费购买&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    }
}

//结束之后移除监听
-(void)dealloc
{
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKPaymentQueue defaultQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; removeTransactionObserver:self];
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2，发起购买&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//查询用户购买的产品的信息
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)toBuy:(NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)productId {
    NSArray &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;product = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[NSArray alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; initWithObjects:productId, nil];
    NSSet &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;set = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NSSet setWithArray:product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    SKProductsRequest &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; request = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKProductsRequest alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    initWithProductIdentifiers:set];
    request.delegate = self;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;request start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self showHUD:@&quot;正在购买，请稍后&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}

//成功后的回调
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)productsRequest:(SKProductsRequest &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)request didReceiveResponse:
(SKProductsResponse &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)response {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self hideHUD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    NSArray &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;myProduct = response.products;
    if (myProduct.count == 0) {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self showMessage:@&quot;无产品信息&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    return;
    }
    SKPayment &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; payment = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SKPayment paymentWithProduct:myProduct[0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;];
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKPaymentQueue defaultQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; addPayment:payment];
}

//查询失败后的回调
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)request:(SKRequest &lt;span class=&quot;ge&quot;&gt;*)request didFailWithError:(NSError *&lt;/span&gt;)error {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self hideHUD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self showHUD:@&quot;查询失败&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    NSLog(@&quot;%@&quot;,error);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3，购买后的回调&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void)paymentQueue:(SKPaymentQueue &lt;span class=&quot;ge&quot;&gt;*)queue updatedTransactions:(NSArray *&lt;/span&gt;)
transactions {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self hideHUD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    for (SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;transaction in transactions)
    {
        switch (transaction.transactionState)
        {
        case SKPaymentTransactionStatePurchased://交易完成
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self completeTransaction:transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
        break;&lt;span class=&quot;sb&quot;&gt;

        case SKPaymentTransactionStateFailed://交易失败
            [self failedTransaction:transaction];
        break;

        case SKPaymentTransactionStateRestored://已经购买过该商品
            [self restoreTransaction:transaction];
        break;

        case SKPaymentTransactionStatePurchasing://商品添加进列表
            [self showMessage:@&quot;正在请求付费信息，请稍后&quot;];
        break;

        default:
        break;
    }
&lt;/span&gt;}

}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4，失败、恢复等操作&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void) failedTransaction: (SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)transaction{&lt;span class=&quot;sb&quot;&gt;

    if (transaction.error.code != SKErrorPaymentCancelled)
    {
        [self showHUD:@&quot;用户取消交易&quot;];
    }else{
        [self showHUD:@&quot;购买失败，请重试&quot;];
    }
    [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
    //购买失败 通知自己服务器
    [self doRequest:@&quot;failed&quot;];
&lt;/span&gt;}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void) restoreTransaction: (SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)transaction
{
    NSLog(@&quot;已经购买过该商品&quot;);
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKPaymentQueue defaultQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; finishTransaction:transaction];

}
//恢复购买 （非消耗品的时候 一定要有恢复购买）
-(void) paymentQueueRestoreCompletedTransactionsFinished:
(SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)transaction{
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self doRequest:@&quot;恢复数据&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}
-(void) paymentQueue:(SKPaymentQueue &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;) paymentQueue
restoreCompletedTransactionsFailedWithError:(NSError &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)error{
    NSLog(@&quot;error：%@&quot;， error);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4，购买成功&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void) completeTransaction: (SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)transaction
{
    //获取购买凭证
    NSData &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;receiptData = &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;NSData dataWithContentsOfURL:
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[NSBundle mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; appStoreReceiptURL]];
    NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;receiptStr = &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;receiptData base64EncodedStringWithOptions:
    NSDataBase64EncodingEndLineWithLineFeed];&lt;span class=&quot;sb&quot;&gt;

    //通知后台 结束购买
    NSString *productid = transaction.payment.productIdentifier;
    if ([productid length] &amp;gt; 0) {
    [self doPostReceipt:receiptStr withIndex:0];
    }
    [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;常见掉单问题&quot;&gt;常见掉单问题&lt;/h3&gt;
&lt;p&gt;苹果内购最常见问题，掉单。就是你在苹果付款成功，但是自己后台却不知道。我们的解决方法是，购买成功之后，本地记录凭证。通知后台，通知失败，再通知，往复三次。如果最终通知失败，可能因为网络等原因，凭证记录本地，下次启动app再往复通知，直至通知成功。通知成功之后，删掉本地凭证。当然后台也会做自己的判断&lt;/p&gt;

&lt;p&gt;在说一下我们记录和删除凭证吧&lt;/p&gt;

&lt;p&gt;4，记录删除凭证&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//保存交易凭证
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)saveReceipt:(NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)receiptStr{
    //沙盒/appleBuy/订单号.plist     tradeNo是后台生成的订单号
    NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;savedPath = &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;NSString stringWithFormat:@&quot;%@%@.plist&quot;,
    AppleBuyFilePath,&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;appleBuyDic objectForKey:@&quot;tradeNo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;];
    if (appleBuyDic!=nil) {
        NSDictionary &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;dic = @{
            @&quot;tradeNo&quot;:&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;appleBuyDic valueForKey:@&quot;tradeNo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;,
            @&quot;notifyUrl&quot;:&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;appleBuyDic valueForKey:@&quot;notifyUrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;,
            @&quot;receipt&quot;:receiptStr
        
        };
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dic writeToFile:savedPath atomically:YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    }
}

//删除交易凭证
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)deleteReceipt:(NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)tradeNo{&lt;span class=&quot;sb&quot;&gt;

    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSString *savedPath = [NSString stringWithFormat:@&quot;%@%@.plist&quot;,
    AppleBuyFilePath,tradeNo];
    if ([fileManager fileExistsAtPath:savedPath])
    {
        [fileManager removeItemAtPath:savedPath error:nil];
    }
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Fri, 12 May 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/apple-pay</link>
				<guid isPermaLink="true">http://localhost:4000/apple-pay</guid>
			</item>
		
			<item>
				<title>gif 动图支持</title>
				<description>&lt;p&gt;iOS 9.0之后照片支持gif的展示了，简介一下保存gif图的方法 和加载gif图的方法&lt;/p&gt;

&lt;h3 id=&quot;保存-gif-图&quot;&gt;保存 gif 图&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//保存图片
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)saveImageWithData:(NSData &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)imageData{
    if (&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UIDevice currentDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;.systemVersion.floatValue &amp;gt;= 9.0f) {
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[PHPhotoLibrary sharedPhotoLibrary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; performChanges:^{&lt;span class=&quot;sb&quot;&gt;

        PHAssetResourceCreationOptions *options = [[PHAssetResourceCreationOptions 
        alloc] init];
        [[PHAssetCreationRequest creationRequestForAsset] 
        addResourceWithType:PHAssetResourceTypePhoto
         data:[common getNSDataFromUrl:imageUrl] options:options];
        } completionHandler:^(BOOL success, NSError * _Nullable error) {

            [self image:nil didFinishSavingWithError:error contextInfo:nil];

        }];

    }else {
        UIImageWriteToSavedPhotosAlbum([UIImage imageWithData:
        [common getNSDataFromUrl:imageUrl]], 
        self, 
        @selector(image:didFinishSavingWithError:contextInfo:), nil);
    }

&lt;/span&gt;}

//保存之后的提示方法
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)image:(UIImage &lt;span class=&quot;ge&quot;&gt;*)image didFinishSavingWithError:(NSError *&lt;/span&gt;)error
contextInfo:(void &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)contextInfo
{
    if (error != NULL)
    {
    NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;message;
    if (error.code ==-3310) {
        message = @&quot;请到设置隐私开启相册权限&quot;;
    }else{
        message = @&quot;保存失败&quot;;
    }
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NSObject toastMessage:message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    }
    else  // No errors
    {
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NSObject toastMessage:@&quot;已保存至手机相册&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;获取gif图片资源的方法&quot;&gt;获取gif图片资源的方法&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)getImage{
    PHImageManager &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; manager =&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PHImageManager defaultManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    PHImageRequestOptions &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; ops =&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[PHImageRequestOptions alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;init];&lt;span class=&quot;sb&quot;&gt;

    PHAsset * asset = [self.dataArray objectAtIndex:indexPath.row];
    // 下面的回调会返回多次 该属性设置YES 只返回一次，返回的是原图
    ops.synchronous = YES;
    ops.resizeMode = PHImageRequestOptionsResizeModeExact;

    [manager requestImageDataForAsset:asset options:ops
     resultHandler:^(NSData * _Nullable imageData,
      NSString * _Nullable dataUTI, 
      UIImageOrientation orientation,
       NSDictionary * _Nullable info) {
        if (imageData.length){

        //gif 图片
        if ([dataUTI isEqualToString:(__bridge NSString *)kUTTypeGIF]) {
            //这里获取gif图片的NSData数据
            _gifImageData = imageData;
        }
        else {
            //其他格式的图片
            returnImage = [UIImage imageWithData:imageData];

        }

    }else{
        //如果没有获取到imagedata，尝试直接获取图片
        [manager requestImageForAsset:asset targetSize:AssetGridThumbnailSize 
        contentMode:PHImageContentModeAspectFill options:ops
         resultHandler:^(UIImage * result, NSDictionary * info) {
            if (result) {
                returnImage = result;
            }
        }];
    }
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Mon, 01 May 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/iOS_gif</link>
				<guid isPermaLink="true">http://localhost:4000/iOS_gif</guid>
			</item>
		
			<item>
				<title>web后端</title>
				<description>&lt;p&gt;以前专业写前端，后端技术不够扎实，发现这样对我的限制特别大，不仅在开发阶段，数据基本全是假数据，也很难做动态网页。所以就想学一门后端语言，补一下自己的短板，于是我把目标瞄准了Java，毕竟Java能使用的场景太多了。Java的语言本身倒是不难，但服务端的环境配置真是有点绕啊。于是在我还没看完Java的基础语法的时候，就果断弃了。&lt;/p&gt;

&lt;p&gt;后面开始看PHP，PHP是简单，当然我是说入门简单。毕竟任何一门语言本身，都是深奥而伟大的存在。但是刚开始我就是为了配合前端，简单入门再加上google和度娘，也算勉强够了。而且，PHP有服务端的集成环境，方便入门阶段的学习。在这里推荐一下一个MAC版的集成环境XAMPP，希望对大家能有所帮助。&lt;/p&gt;

&lt;p&gt;早就听说过Node.js环境下，JS也可以写后端了，一直想学习呢，就是没有大块的时间（这个借口只值5分）。最近一段时间了解了一下，发现Node.js真是个好东西，虽然只有CLI没有GUI工具，但是开发还是很方便的。所以我决定要好好看一看Node.js了。不过长时间不用，还是会遗忘，PHP中间隔了两个月就忘的差不多了(笑哭)。这个问题怎么处理呢？很严重。。。。这种事没有特别有效的方法，只能以后多用点了。等又时间，我把PHP和Node.js的常用API整理一下，写个博客吧，也避免遗忘，慢慢加油吧！！&lt;/p&gt;

&lt;p&gt;先简单记录几个Node.js的学习网站&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nodejs.cn&quot;&gt;Node.js中文网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.runoob.com/nodejs/nodejs-tutorial.html&quot;&gt;Node.js 菜鸟教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cnodejs.org&quot;&gt;Node.js中文论坛&lt;/a&gt;中的新手入门可以看看，挺好的&lt;/p&gt;

</description>
				<pubDate>Sun, 15 Jan 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/server</link>
				<guid isPermaLink="true">http://localhost:4000/server</guid>
			</item>
		
			<item>
				<title>Xcode快捷键 和 iOS零散bug</title>
				<description>&lt;p&gt;iOS开发多年了 一直只有保存代码的习惯 是时候整合一下了 长时间的开发 最大的遗憾就是没有开刚开始的时候就养成写博客的习惯 以至于当时觉得很有收获或者很有成就感的瞬间 在后来完全不记得了。以后持续更细……&lt;/p&gt;

&lt;h3 id=&quot;xcode-常用快捷键&quot;&gt;Xcode 常用快捷键&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.h .m 切换：Control + Command + 上箭头
浏览过的文件快速切换：Control + Command + 左右箭头
代码上跳：Cmd+Option+&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;
代码左移：Cmd+&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;
全局搜索：Cmd+Shift+F
搜索：Cmd+F
快速打开：Cmd+Shift+O 搜索文件
定位打开文件：Cmd+Shift+J
清除工程：Cmd+Shift+K
暂停运行模拟器：Cmd+.
文档和参考：Cmd+Shift+0
工程导航器：Cmd+1
多行注释：Cmd+Option+/

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;图片扭曲的问题&quot;&gt;图片扭曲的问题&lt;/h3&gt;

&lt;p&gt;测试突然找来 说线上的app图片全部扭曲了，我下载了发现并没有。经过排查发现，iOS 8 以下的系统，图片真的扭曲了。后来发现扭曲的全部是 Images.xcassets 里面的图片，其他图片和网络图片都是好的。后来确认是苹果自己的锅，Xcode 9.2 之后，打出来的包，iOS 8的系统都有问题。经产品测试和开发商议，这个问题不管了。&lt;/p&gt;

&lt;h3 id=&quot;获取启动图获取launchimage-中的图片&quot;&gt;获取启动图获取LaunchImage 中的图片&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    if (IS_iPHONE_X) {
        _guideView.image = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UIImage imageNamed:@&quot;LaunchImage-1100-2436h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    }else if (FUll_VIEW_HEIGHT&amp;gt;480) {
        _guideView.image = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UIImage imageNamed:@&quot;LaunchImage-800-667h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    }else {
        _guideView.image = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UIImage imageNamed:@&quot;LaunchImage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;微信屏蔽了通用链接&quot;&gt;微信屏蔽了通用链接&lt;/h3&gt;

&lt;p&gt;刚开始还以为只把淘宝的通用链接给屏蔽了，回来测试了一下我们自己的通用链接，也被屏蔽了，以后通过分享微信，刷流量，又少了一条途径。&lt;/p&gt;

&lt;h3 id=&quot;ios11-uicollectionview滚动条以及放在上面的view被headerview遮盖的问题&quot;&gt;iOS11 UICollectionView滚动条以及放在上面的View被headerView遮盖的问题&lt;/h3&gt;
&lt;p&gt;最近写项目在 iOS 11上，UICollectionView的滚动条 以及 放在上面的View被 UICollectionView的 headerView遮盖  ，通过研究发现，需要设置zPosition 才能解决这个问题。具体实施方案如下：&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.h文件&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//添加的代码（因iOS 11以上才有问题，所以提前判定，避免对iOs 10造成新的影响）
&lt;span class=&quot;gh&quot;&gt;#ifdef __IPHONE_11_0&lt;/span&gt;
@interface CustomLayer : CALayer
@end
&lt;span class=&quot;gh&quot;&gt;#endif&lt;/span&gt;

@interface RecommentTvAndVideoheaderView : UICollectionReusableView
@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.m文件&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//添加的代码
&lt;span class=&quot;gh&quot;&gt;#ifdef __IPHONE_11_0&lt;/span&gt;
@implementation CustomLayer1
&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (CGFloat) zPosition {
    return 0;
}
@end
&lt;span class=&quot;gh&quot;&gt;#endif&lt;/span&gt;

&lt;span class=&quot;gh&quot;&gt;#ifdef __IPHONE_11_0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; (Class)layerClass {
    return &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CustomLayer1 class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}
&lt;span class=&quot;gh&quot;&gt;#endif&lt;/span&gt;

对于有多个headerView的情况，需要在每个headerView中单独处理（每个的名称需要不同）

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Mon, 09 May 2016 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/iOS</link>
				<guid isPermaLink="true">http://localhost:4000/iOS</guid>
			</item>
		
			<item>
				<title>如何使用Github搭建自己的静态网站</title>
				<description>&lt;h3 id=&quot;首先登陆自己的github账号-如果没有-注册一个-无需多说&quot;&gt;首先登陆自己的Github账号 如果没有 注册一个 无需多说&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/github-page/01.png&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建仓库-用于存放自己的页面代码&quot;&gt;创建仓库 用于存放自己的页面代码&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/github-page/02.png&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;切换到settings页面&quot;&gt;切换到Settings页面&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/github-page/03.png&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;往下拉-会看到一个选择主题的选项按钮&quot;&gt;往下拉 会看到一个选择主题的选项按钮&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/github-page/04.png&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;选择一个自己喜欢的样式-点击选择&quot;&gt;选择一个自己喜欢的样式 点击选择&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/github-page/05.png&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;上传自己选中的主题&quot;&gt;上传自己选中的主题&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/github-page/06.png&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;再切换到settings页面-往下拉&quot;&gt;再切换到Settings页面 往下拉&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/github-page/07.png&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;此时-github-已经帮我们生成了自己网页的地址-点开看看&quot;&gt;此时 Github 已经帮我们生成了自己网页的地址 点开看看！&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/github-page/08.png&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;再看我们的仓库里面&quot;&gt;再看我们的仓库里面&lt;/h3&gt;
&lt;p&gt;我们的仓库里面也已经有了配置和第一个页面的文件（index.md）以后的每个博文 都会是一个.md文件 index.md里面有如何使用的介绍 功能不算丰富 但是只是写个博客 也足够了
&lt;img src=&quot;http://localhost:4000/assets/images/github-page/09.png&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;切换样式&quot;&gt;切换样式&lt;/h3&gt;
&lt;p&gt;如果自己不喜欢原本的模版，可以自己写，Github支持.html文件 支持js特效。当然，如果觉得自己的设计不够好，也可以去下载别的模版，比如楼主的模版，就是在&lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;下载的。对于&lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;的使用，里面有很详细的教程。&lt;/p&gt;

&lt;h3 id=&quot;更换域名&quot;&gt;更换域名&lt;/h3&gt;
&lt;p&gt;如果想换成自己的域名，也很简单
&lt;br /&gt;
1，申请一个域名
&lt;br /&gt;
2，解析域名（选择CNAME方式解析，地址选择Github分配给我们的 “二级域名.github.io”）
&lt;br /&gt;
3，创建一个CNAME文件，里面写上自己的域名就行了（注意：CNAME字母要大写，没有后缀）
&lt;br /&gt;
4，上传到自己刚开始创建的仓库&lt;/p&gt;

&lt;h3 id=&quot;搞定了-试试自己的网站吧&quot;&gt;搞定了 试试自己的网站吧！！&lt;/h3&gt;

</description>
				<pubDate>Thu, 24 Mar 2016 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/github-page</link>
				<guid isPermaLink="true">http://localhost:4000/github-page</guid>
			</item>
		
			<item>
				<title>iOS多线程简析</title>
				<description>&lt;h2 id=&quot;线程&quot;&gt;线程：&lt;/h2&gt;
&lt;p&gt;时间：线程在时间上可以分为“串行” 和“并发”两种方式，同步就是让我们的线程同时执行，异步线程不同时执行。强调时间性。&lt;/p&gt;

&lt;p&gt;关系：线程在线程之间关系上可以分为“顺序执行”和“并行执行”，强调的是线程之间的关系。&lt;/p&gt;

&lt;h2 id=&quot;任务同步sync和-异步async任务就是执行操作就是代码的运行&quot;&gt;任务：同步（Sync）和 异步（Async）（任务：就是执行操作，就是代码的运行）&lt;/h2&gt;
&lt;h3 id=&quot;同步sync&quot;&gt;同步（Sync）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;同步添加任务到指定的队列中，在添加的任务执行结束之前，会一直等待，直到队列里面的任务完成之后再执行&lt;/li&gt;
  &lt;li&gt;只能在当前线程中执行任务，不具备开启新线程的能力&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;异步async&quot;&gt;异步（Async）&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;异步添加任务到指定的队列中，它不会做任何等待，可以继续执行任务&lt;/li&gt;
  &lt;li&gt;可以在新的线程中执行任务，具备开启新线程的能力&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;队列-串行和并行&quot;&gt;队列 ：串行和并行。&lt;/h2&gt;
&lt;h3 id=&quot;串行和并行&quot;&gt;串行和并行&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;相同： 串行队列和并发队列都符合先进先出的原则。&lt;/li&gt;
  &lt;li&gt;区别： 执行的顺序不同，以及开启的线程数不同&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;四种组合情况gcd为例&quot;&gt;四种组合情况（GCD为例）&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void)viewDidLoad {
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;super viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;sb&quot;&gt;

    //1.获取并行队列，异步追加任务
    //[self concurrentAndAsync];

    //2.获取并行队列，同步追加任务
    //[self concurrentAndSync];

    //3.创建串行队列，异步追加任务
    //[self serialAndAsync];

    //4.创建串行队列，同步追加任务
    //[self serialAndSync];

    //5.向主队列中同步追加任务引起死锁
    [self addSyncTaskToMainQueue];

    [self mainQueuePrintTask];

&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;1.获取并行队列，异步追加任务&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void)concurrentAndAsync {&lt;span class=&quot;sb&quot;&gt;

    //(1)获取全局队列
    dispatch_queue_t queue = dispatch_get_global_queue(
        DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);

    //(2)开启多线程1：添加任务1
    dispatch_async(queue, ^{
        for (int i = 0; i &amp;lt; 20;i++) {
            NSLog(@&quot;多线程1：%i&quot;, i);
        }
    });

    //(3)开启多线程2：添加任务2
    dispatch_async(queue, ^{
        for (int i = 0; i &amp;lt; 20;i++) {
            NSLog(@&quot;多线程2：%i&quot;, i);
        }
    });

    //睡眠
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW,
        (int64_t)(2.0 * NSEC_PER_SEC)), queue, ^{
        NSLog(@&quot;-------------等待2秒&quot;);
        // 2秒后异步执行这里的代码...
        [self postNoti];
        NSLog(@&quot;-------------time&quot;);
    });

&lt;/span&gt;}

//打印结果： 主线程和多线程 之间没有任何先后顺序 同时执行
//打印结果： 主线程1和多线程2 之间也没有任何先后顺序 并发执行

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.获取并行队列，同步追加任务&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void)concurrentAndSync {&lt;span class=&quot;sb&quot;&gt;

    //(1)获取全局队列
    dispatch_queue_t queue = dispatch_get_global_queue(
        DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);

    //(2)添加任务1
    dispatch_sync(queue, ^{
        for (int i = 0; i &amp;lt; 20;i++) {
            NSLog(@&quot;任务1：%i&quot;, i);
        }
    });

    //(3)添加任务2
    dispatch_sync(queue, ^{
        for (int i = 0; i &amp;lt; 20;i++) {
            NSLog(@&quot;任务2：%i&quot;, i);
        }
    });

&lt;/span&gt;}

//打印结果： 多线程在前 优先执行，多线程完成之后，主线程才执行
//打印结果： 多线程之中任务1在前 先执行 任务1完成之后，才执行任务2

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.创建串行队列，异步追加任务&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;

-&lt;/span&gt; (void)serialAndAsync {
//(1)创建串行队列
dispatch_queue_t queue = dispatch_queue_create(&quot;iOS&quot;, DISPATCH_QUEUE_SERIAL);&lt;span class=&quot;sb&quot;&gt;

    //(2)添加任务1
    dispatch_async(queue, ^{
        for (int i = 0; i &amp;lt; 20;i++) {
            NSLog(@&quot;串行队列中执行任务1：%i&quot;, i);
        }
    });

    //(3)添加任务2
    dispatch_async(queue, ^{
        for (int i = 0; i &amp;lt; 20;i++) {
            NSLog(@&quot;串行队列中执行任务2：%i&quot;, i);
        }
    });
&lt;/span&gt;}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//打印结果： 主线程和多线程 之间没有任何先后顺序 同时执行
//打印结果： 多线程之中任务1在前 先执行 任务1完成之后，才执行任务2

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.创建串行队列，同步追加任务&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;

-&lt;/span&gt; (void)serialAndSync {
    //(1)创建串行队列
    dispatch_queue_t queue = dispatch_queue_create(&quot;iOS&quot;, DISPATCH_QUEUE_SERIAL);&lt;span class=&quot;sb&quot;&gt;

    //(2)添加任务1
    dispatch_sync(queue, ^{
        for (int i = 0; i &amp;lt; 20;i++) {
            NSLog(@&quot;串行队列中执行任务1：%i&quot;, i);
        }
    });

    //(3)添加任务2
    dispatch_sync(queue, ^{
        for (int i = 0; i &amp;lt; 20;i++) {
            NSLog(@&quot;串行队列中执行任务2：%i&quot;, i);
        }
    });
&lt;/span&gt;}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//打印结果： 多线程在前 优先执行，多线程完成之后，主线程才执行
//打印结果： 多线程之中任务1在前 先执行 任务1完成之后，才执行任务2

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5.向主队列中同步追加任务引起死锁&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;

-&lt;/span&gt; (void)serialAndSync {
    dispatch_queue_t mainQueue = dispatch_get_main_queue();&lt;span class=&quot;sb&quot;&gt;

    dispatch_async(mainQueue, ^{
        //NSLog(@&quot;主队列中添加此任务&quot;);
        for (int i =0; i &amp;lt; 50; i++) {
            NSLog(@&quot;%i&quot;, i);
        }
    });
&lt;/span&gt;}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//打印结果： 只有mainQueuePrintTask方法的打印，没有本方法的打印

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主线程方法&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void)postNoti{&lt;span class=&quot;sb&quot;&gt;

    NSLog(@&quot;睡眠2秒&quot;);
&lt;/span&gt;}
&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void)mainQueuePrintTask {
    for (int i = 0; i &amp;lt; 50000;i++) {
        NSLog(@&quot;主线程：%i&quot;, i);
    }
}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;同步执行 + 串行队列：我们把任务分配一个个线程，每个线程的任务都在主线程中执行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;异步执行 + 串行队列：队列中的任务顺序执行：在子线程中执行，主线程继续，不会等待子线程执行完毕。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;同步执行 + 并发队列：（一般不用）：队列中任务顺序执行，在主线程中执行（并行）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;异步执行 + 并发队列：队列中的任务同时执行；在子线程中执行；主线程继续执行，不会等待子线程执行完毕。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;nsthread的使用&quot;&gt;NSThread的使用&lt;/h2&gt;
&lt;p&gt;1.优点：NSThread比其他两种多线程方案较轻量级，更直观地控制线程对象&lt;/p&gt;

&lt;p&gt;2.缺点：需要自己管理线程的生命周期，线程同步。线程同步对数据的加锁会有一定的系统开销&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void)viewDidLoad {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;super viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;sb&quot;&gt;


    //1.创建线程对象
    NSThread *thread = [[NSThread alloc] initWithTarget:self
        selector:@selector(thread) object:nil];
    thread.name = @&quot;thread-2&quot;;
    // 设置线程的优先级(0.0 - 1.0，1.0最高级)
    thread.threadPriority = 1;
    //开启一个多线程
    [thread start];

    //2.创建一个线程对象，并且直接开启此线程，但无法获取线程对象。
    //[NSThread detachNewThreadSelector:@selector(thread)
        toTarget:self withObject:nil];


    //3.创建一个线程对象，并且启动此线程，调用当前self对象的方法。（隐式创建线程的方法）
    //[self performSelectorInBackground:@selector(thread) withObject:nil];
    //[self thread];
    
    for (int i = 0; i &amp;lt; 20; i++) {
        NSLog(@&quot;主线程：%i&quot;,i);
    }

&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;多线程的入口方法&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void)thread {&lt;span class=&quot;sb&quot;&gt;


    //获取当前方法的线程对象
    NSThread *thread = [NSThread currentThread];
    NSLog(@&quot;thread-2:%@&quot;, thread);
    //获取主线程
    //NSThread *main = [NSThread mainThread];


    //多线程分配堆栈大小为512k
    NSLog(@&quot;thread-2:stackSize:%li&quot;, [thread stackSize]);

    for (int i = 0; i &amp;lt; 50; i++) {

        if (i == 10) {

            NSLog(@&quot;thread sleep&quot;);
            //使当前线程睡眠
            [NSThread sleepForTimeInterval:2];
        }

        if (i == 20) {
            NSLog(@&quot;thread end&quot;);
            //线程退出
            [NSThread exit];
            }
            NSLog(@&quot;thread：%i&quot;,i);
        }

        //判断当前线程是否为主线程
        if (![NSThread isMainThread]) {
            NSLog(@&quot;当前线程不是主线程&quot;);
        }
    }

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;nsoperationqueue使用&quot;&gt;NSOperationQueue使用&lt;/h2&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void)viewDidLoad {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;super viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;sb&quot;&gt;


    //1.创建一个线程队列（线程池）
    NSOperationQueue *queue = [[NSOperationQueue alloc] init];

    //2.创建线程 //NSOperation-&amp;gt;NSInvocationOperation
    NSInvocationOperation *op1 = [[NSInvocationOperation alloc] initWithTarget:self
    selector:@selector(thread1:) object:@&quot;operation-1&quot;];

    NSInvocationOperation *op2 = [[NSInvocationOperation alloc] initWithTarget:self
    selector:@selector(thread2:)object:@&quot;operation-2&quot;];

    HWOperation *op3 = [[HWOperation alloc] initTarget:self
    selector:@selector(thread3)];

    //设置queue的并发数
    //queue.maxConcurrentOperationCount = 1;

    op2.queuePriority = NSOperationQueuePriorityVeryHigh;

    //[queue setSuspended:YES];

    //3.把线程对象加入到线程队列中
    [queue addOperation:op1];
    [queue addOperation:op2];

    [queue addOperation:op3];

    //[queue setSuspended:NO];

    //[queue addOperationWithBlock:^{
    //    for (int i = 0; i &amp;lt; 20; i++) {
    //        NSLog(@&quot;block:%i&quot;, i);
    //    }
    //}];

    for (int i = 0; i &amp;lt; 10; i++) {
        NSLog(@&quot;主线程:%i&quot;,i);
    }

&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;线程方法&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//线程thread1入口方法
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)thread1:(NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)name {&lt;span class=&quot;sb&quot;&gt;

    for (int i = 0; i &amp;lt; 20; i++) {
        NSLog(@&quot;多线程%@:%i&quot;, name, i);
    }
&lt;/span&gt;}

//线程thread2入口方法
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)thread2:(NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)name {&lt;span class=&quot;sb&quot;&gt;

    for (int i = 0; i &amp;lt; 20; i++) {
        NSLog(@&quot;多线程%@:%i&quot;, name, i);
    }
&lt;/span&gt;}

//自定义线程类：thread3的入口方法
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)thread3 {
    for (int i = 0; i &amp;lt; 20; i++) {
        NSLog(@&quot;HWOPeration线程:%i&quot;, i);
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;只是简单使用，多有不足，有时间再补充吧&lt;/p&gt;

</description>
				<pubDate>Mon, 11 Jan 2016 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/GCD</link>
				<guid isPermaLink="true">http://localhost:4000/GCD</guid>
			</item>
		
	</channel>
</rss>
