<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>wanglizhen</title>
		<description>Welcome to wanglizhen 的主页! - iOS开发 iOS技术探讨 开发中的bug记录 微信小程序开发技术探讨与bug记录 前端 html、js、css 开发  IT技术探讨 共同学习 共同进步</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>快应用入门 与 常见问题</title>
				<description>&lt;p&gt;快应用出来好几天啦，今天才有时间好好看看，这里是&lt;a href=&quot;https://doc.quickapp.cn&quot;&gt;官方文档&lt;/a&gt;。环境搭建按照文档上说的来，但是他们要求安装6.0以上版本的NodeJS，又不能高于8.0版本，因为我是老早以前就安装了NodeJS，9.9的版本，也懒得降版本了，就凑活着用吧。&lt;/p&gt;

&lt;p&gt;安装hap-toolkit&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//创建项目
npm install -g hap-toolkit

//查看版本
hap -V

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;环境配置好，创建项目&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//创建项目
hap init Hello
//安装依赖
npm install

//编译出错
npm run build

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;错误提示&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gt&quot;&gt;
&amp;gt; Hello@1.0.0 build /Users/wanglizhen/Desktop/19Lou/qkapp/Hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; cross-env NODE_PLATFORM=na NODE_PHASE=dv webpack&lt;/span&gt;
    --config ./node_modules/hap-tools/webpack.config.js

module.js:545
throw err;
^

Error: Cannot find module '/Users/wanglizhen/Desktop/19Lou/qkapp/
    Hello/node_modules/hap-tools/webpack.config.js'
at Function.Module._resolveFilename (module.js:543:15)
at Function.Module._load (module.js:470:25)
at Module.require (module.js:593:17)
at require (internal/module.js:11:18)
at module.exports (/Users/wanglizhen/Desktop/19Lou/qkapp/
    Hello/node_modules/webpack/bin/convert-argv.js:80:13)
at Object.&lt;span class=&quot;nt&quot;&gt;&amp;lt;anonymous&amp;gt;&lt;/span&gt; (/Users/wanglizhen/Desktop/19Lou/qkapp/
    Hello/node_modules/webpack/bin/webpack.js:39:40)
at Module._compile (module.js:649:30)
at Object.Module._extensions..js (module.js:660:10)
at Module.load (module.js:561:32)
at tryModuleLoad (module.js:501:12)
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! Hello@1.0.0 build: &lt;span class=&quot;sb&quot;&gt;`cross-env NODE_PLATFORM=na NODE_PHASE=dv webpack
    --config ./node_modules/hap-tools/webpack.config.js`&lt;/span&gt;
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the Hello@1.0.0 build script.
npm ERR! This is probably not a problem with npm.
    There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/wanglizhen/.npm/_logs/2018-03-26T02_43_53_924Z-debug.log&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决方案：我看了下错误原因 发现项目下面缺少/node_modules/hap-tools/webpack.config.js文件，我进入目录查看了一下，原来连hap-tools目录都没有，于是我就手动装了一下&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
npm install hap-tools

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//再编译&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
npm run build

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//通过&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gt&quot;&gt;
&amp;gt; hello@1.0.0 build /Users/wanglizhen/Desktop/19Lou/qkapp/hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; cross-env NODE_PLATFORM=na NODE_PHASE=dv webpack&lt;/span&gt;
    --config ./node_modules/hap-tools/webpack.config.js

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 配置环境：{&quot;NODE_PLATFORM&quot;:&quot;na&quot;,&quot;NODE_PHASE&quot;:&quot;dv&quot;}
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; Build Time Cost: NaNs
Hash: 6965d809aaa352821c8f
Time: 1437ms
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; 15 hidden modules
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Loader ### 编译完成, 生成压缩包
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Loader ### 压缩包加签名
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Loader ### 自动刷新执行build :
&lt;span class=&quot;gt&quot;&gt;&amp;gt; hello@1.0.0 notify /Users/wanglizhen/Desktop/19Lou/qkapp/hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; node ./node_modules/hap-tools/debugger/command/notify.js&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//启动HTTP服务器&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
npm run server

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//搞定了&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gt&quot;&gt;
&amp;gt; hello@1.0.0 server /Users/wanglizhen/Desktop/19Lou/qkapp/hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; cross-env NODE_MOUNTED_ROUTER=&quot;debug bundle&quot;&lt;/span&gt;
node ./node_modules/hap-tools/debugger/server/index.js

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Server ### server started at http://localhost:12306/
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Server ### 请确保手机与App Server处于相同网段

生成HTTP服务器的二维码: http://172.16.115.231:12306
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
█ ▄▄▄▄▄ █▄▀▀▄▄█▄█ █ ▄▄▄▄▄ █
█ █   █ ███▄█  ▀▄██ █   █ █
█ █▄▄▄█ ██▄▀▄▀▀████ █▄▄▄█ █
█▄▄▄▄▄▄▄█ █ ▀▄▀ █▄█▄▄▄▄▄▄▄█
█  █▄ ▀▄██ ▄▄ ██ ▀▀▄█▀▀▀▀▄█
█▀ ▄█▀█▄  ▀ ▄▄▄ ▄  ▄ █ ▀▀ █
█ ▀▄▄▀▀▄█  █ ▀▀▄ █▄▄▀▀██▀▄█
█ ▄▀▄▀ ▄▄  ▀█ ▄█ ▄▄██▀▄ ▄ █
█▄█▄█▄▄▄▄▀▄█▄▀  █ ▄▄▄ █▄ ██
█ ▄▄▄▄▄ ██▄▀ ▀▀ █ █▄█ ▄█▀▄█
█ █   █ █ █▀▀▀██▄▄▄  ▄ █▀▀█
█ █▄▄▄█ █▀ ▄▄ █ ▀█▀▀▀ █   █
█▄▄▄▄▄▄▄█▄██▄██▄▄▄█▄██▄██▄█

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面就可以专心的的研究代码了&lt;/p&gt;

</description>
				<pubDate>Mon, 26 Mar 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/qkapp</link>
				<guid isPermaLink="true">http://localhost:4000/qkapp</guid>
			</item>
		
			<item>
				<title>基于CTMediator解耦</title>
				<description>&lt;p&gt;CTMediator 模块化开发用的还是比较多的，网上教程和讲解也是非常多的，我就不班门弄斧了，也不详细讲解原理了，只是简单记录一下样式和使用&lt;/p&gt;

&lt;h3 id=&quot;首先-创建target-action---继承自-nsobject-就行&quot;&gt;首先 创建Target-Action   继承自 NSObject 就行&lt;/h3&gt;

&lt;p&gt;Target_XXXXXX    这里的 XXXXXX 最好有意义，后面需要通过传入Target 的XXXXXX代码决定进入Target_XXXXXX类中执行方法，比如我下面的 Target_Home 是说这是首页的接口处理&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.h文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;

@interface Target_Home : NSObject

//获取首页对象
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_HomeViewController:(NSDictionary *&lt;/span&gt;)params;
//刷新首页方法
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)Action_refreshUpdate:(NSDictionary &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)params;

//获取另外页面对象
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_SecondViewController:(NSDictionary *&lt;/span&gt;)params;

@end&lt;span class=&quot;sb&quot;&gt;






&lt;/span&gt;.m文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &quot;Target_Home.h&quot;&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;#import &quot;HomeViewController.h&quot;&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;#import &quot;SecondViewController.h&quot;&lt;/span&gt;

@implementation Target_Home
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_HomeViewController:(NSDictionary *&lt;/span&gt;)params{
    HomeViewController &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;homeVC = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HomeViewController sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    return homeVC;
}
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)Action_refreshUpdate:(NSDictionary &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)params{
    HomeViewController &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;homeVC = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HomeViewController sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;homeVC refreshUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_SecondViewController:(NSDictionary *&lt;/span&gt;)params{&lt;span class=&quot;sb&quot;&gt;

    SecondViewController *SecondVC = [[SecondViewController alloc] init];
    //参数
    SecondVC.sId = [params objectForKey:@&quot;sId&quot;];
    return SecondVC;
&lt;/span&gt;}

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;创建-ctmediator-的分类&quot;&gt;创建 CTMediator 的分类&lt;/h3&gt;

&lt;p&gt;action 传入要执行的方法名 target中的方法名 都是以action为前缀的，这里的action前缀可以修改，这里不做过多解释&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.h文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &quot;CTMediator.h&quot;&lt;/span&gt;

@interface CTMediator (HomeComponent)
/&lt;span class=&quot;ge&quot;&gt;**&lt;/span&gt;
paramters 参数以字典样式传入
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
-(UIViewController&lt;span class=&quot;ge&quot;&gt;*)home_homeViewControllerWithParamters:(NSDictionary*&lt;/span&gt;)paramters;

/&lt;span class=&quot;ge&quot;&gt;**&lt;/span&gt;
刷新方法
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)home_refreshUpdate;

/&lt;span class=&quot;ge&quot;&gt;**&lt;/span&gt;
paramters 参数写清楚 必要参数和非必要参数
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
-(UIViewController&lt;span class=&quot;ge&quot;&gt;*)home_SecondViewControllerWithParamters:(NSDictionary*&lt;/span&gt;)paramters;

@end&lt;span class=&quot;sb&quot;&gt;







&lt;/span&gt;.m文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &quot;CTMediator+HomeComponent.h&quot;&lt;/span&gt;

@implementation CTMediator (HomeComponent)
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)home_homeViewControllerWithParamters:(NSDictionary *&lt;/span&gt;)paramters{
    return &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;self performTarget:@&quot;Home&quot;
    action:@&quot;HomeViewController&quot; params:paramters shouldCacheTarget:NO];
}
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)home_refreshUpdate{
    &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;self performTarget:@&quot;Home&quot;
    action:@&quot;refreshUpdate&quot; params:nil shouldCacheTarget:NO];
}
&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)home_SecondViewControllerWithParamters:(NSDictionary *&lt;/span&gt;)paramters{&lt;span class=&quot;sb&quot;&gt;

    return [self performTarget:@&quot;Home&quot;
    action:@&quot;SecondViewController&quot; params:paramters shouldCacheTarget:NO];
&lt;/span&gt;}

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;最终使用&quot;&gt;最终使用&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;gh&quot;&gt;#import &quot;CTMediator+HomeComponent.h&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)bButtonClick:(UIButton &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)sender {
    UIViewController &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;viewController = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[CTMediator sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    home_homeViewControllerWithParamters:@{@&quot;home_id&quot;:@&quot;123456&quot;}];
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self.navigationController pushViewController:viewController animated:YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用的好处 就是不用在各处包含#import “XXXX.h” 实现所有页面间的方法 通过路由层间接调用 实现解耦&lt;/p&gt;

</description>
				<pubDate>Sat, 24 Mar 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/iOS-target-action</link>
				<guid isPermaLink="true">http://localhost:4000/iOS-target-action</guid>
			</item>
		
			<item>
				<title>创建自己的Pods库</title>
				<description>&lt;p&gt;我们把自己的代码，全部分模块创建为了一个个库，为了模块化开发，后来发现，模块化开发真是好处多多，下一篇讲一下，模块化开发吧，这两片文章均摘自网络。本人怕原博主删掉博客或者因为网站原因找不到，特在此做了一个简单拷贝 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;amp;mid=2652551137&amp;amp;idx=3&amp;amp;sn=5a6a162a41c54be12b51c0390715c063&amp;amp;chksm=bcd2f2ef8ba57bf95f03ee0cec37516c091d80f1adaf875c98613acc34d9972c240d5a159823&amp;amp;mpshare=1&amp;amp;scene=23&amp;amp;srcid=0822HLLoDepjHMsV9bP1R468#rd&quot;&gt;原文出处&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建存储-podspec-后缀文件的-git-仓库&quot;&gt;创建存储 .podspec 后缀文件的 Git 仓库。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/01.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;记录第一个地址&quot;&gt;记录第一个地址。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/02.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建第二个用于存储代码的-git-仓库&quot;&gt;创建第二个用于存储代码的 Git 仓库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/03.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;记录第二个地址&quot;&gt;记录第二个地址。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/04.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;打开终端-到桌面&quot;&gt;打开终端 到桌面。&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
cd Desktop/

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;然后输入-pod-lib-create-lib-命令创建一个待上传的-lib-模版&quot;&gt;然后输入 pod lib create Lib 命令创建一个待上传的 Lib 模版&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod lib create Lib

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;然后输入邮箱&quot;&gt;然后输入邮箱&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
What is your email?

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;按找提示填写基础信息应该不用每个都解释了吧&quot;&gt;按找提示填写基础信息（应该不用每个都解释了吧）。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/05.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;完成之后-就可以在finder中看到如下&quot;&gt;完成之后 就可以在Finder中看到如下。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/06.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;配置-podspec-后缀文件&quot;&gt;配置 .podspec 后缀文件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/07.png&quot; alt=&quot;创建存储&quot; /&gt;
注意需要修改的地方一般有&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
s.version :  版本号(需跟后面打 Tag 的值相等)
s.summary : 描述(这个如果不修改，后面会出现问题。简单修改，不能超过 s.description 的文字长度，不然也会出问题)
s.homepage : 项目主页（第二个地址 去掉.git）
s.source : Git 仓库地址（第二个地址）
s.ios.deployment_target : 项目最低支持版本
s.source_files : 共享的代码目录
s.frameworks : 所依赖的系统库
s.dependency : 所依赖的第三方库

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;验证&quot;&gt;验证&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod lib lint

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;结果有两个警告 验证失败
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/08.png&quot; alt=&quot;创建存储&quot; /&gt;
于是我忽略了警告 重新验证 验证通过
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/09.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;上传远程仓库&quot;&gt;上传远程仓库&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//链接远程仓库
git remote add origin 第二个地址
//更新本地。（文件有冲突自己解决）
git pull origin master --allow-unrelated-histories

git add .
git commit -m 'Lib commit'
git push origin master

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;上传成功-查看&quot;&gt;上传成功 查看&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/10.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;验证文件有效性&quot;&gt;验证文件有效性&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod spec lint

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;发现tag值不对应
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/11.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同步tag值&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
git tag -a 0.1.0 -m '0.1.0标签'
git push origin master --tags

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同步成功
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/12.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其实也可以在这边后台手动添加tag
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/13.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;上传podspec到第一个远程仓库&quot;&gt;上传.podspec到第一个远程仓库&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod repo add MyPodspec 第一个创建的git仓库地址&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;查看本地库&quot;&gt;查看本地库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/14.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;向-mypodspec-远程仓库中提交-podspec-成功&quot;&gt;向 MyPodspec 远程仓库中提交 .podspec 成功&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod repo push MyPodspec Lib.podspec

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/15.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;可以用了-查一下试试&quot;&gt;可以用了 查一下试试&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod search Lib&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;结果真是日了狗了搜出来一大堆的库想偷懒一下起了这个名字最终还是把自己给坑到了&quot;&gt;结果真是日了狗了！！搜出来一大堆的库！！！想偷懒一下起了这个名字，最终还是把自己给坑到了。。。。。。&lt;/h2&gt;

</description>
				<pubDate>Fri, 23 Feb 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/my-pod</link>
				<guid isPermaLink="true">http://localhost:4000/my-pod</guid>
			</item>
		
			<item>
				<title>微信小程序 小问题集结</title>
				<description>&lt;h3 id=&quot;小程序时间兼容ios版本&quot;&gt;小程序时间兼容iOS版本&lt;/h3&gt;
&lt;p&gt;我们有个需求，需要将服务器取到的时间再处理，在将字符串时间变为时间的时候，安卓手机是没问题的，但是iOS时间转换错误，原来iOS设备只能识别 ‘2017/02/21 11:23:56’ 这种时间格式，不能识别 ‘2017-02-21 11:23:56’ 这种格式，所以在转时间之前，需要先将时间字符串格式化一下，如有需要，再改回来就行了&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//改之前
var myDate = new Date(date)

//改之后
date = date.replace(/-/g, '/');
var myDate = new Date(date)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;持续更新中…….&lt;/p&gt;
</description>
				<pubDate>Sun, 05 Nov 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/wx_problem</link>
				<guid isPermaLink="true">http://localhost:4000/wx_problem</guid>
			</item>
		
			<item>
				<title>微信小程序 文字溢出换行、各种引用 和 半透明浮层实现</title>
				<description>&lt;h3 id=&quot;多行限制-文字溢出换行-并显示-&quot;&gt;多行限制 文字溢出换行 并显示 …&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.board_list_content{&lt;span class=&quot;sb&quot;&gt;

    display: -webkit-box;
    word-break: break-all;
    text-overflow: ellipsis;
    overflow: hidden;
    ont-size: 32rpx;
    -webkit-box-orient: vertical;
    -webkit-line-clamp:4;
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;代码简介&quot;&gt;代码简介&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    white-space:nowrap;  //强制不换行
    
    text-overflow:ellipsis;//文字隐藏后添加省略号
    
    overflow:hidden; //超出文字自动隐藏

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;小程序当中的各种引用&quot;&gt;小程序当中的各种引用&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @import 'style/weui.wxss'; //wxss 样式引用
    
    var Api = require('../../utils/api.js') //js 引用
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;import&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;../../utils/loading.wxml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; // &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;引用
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;include&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login.wxml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; // 除&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;以外的其他标签引用

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;小程序浮层的实现&quot;&gt;小程序浮层的实现&lt;/h3&gt;

&lt;p&gt;首先添加触摸方法 方法什么都不用做 只是为了隔断事件传递用的&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;view&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'floatView'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;wx:if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;capture-catch:touchstart=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;doNothing&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/view&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再添加浮层的半透明属性、位置和层级就行了&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.floatView{
  width:100%; 
  height:100%;
  background-color:#000; 
  filter:alpha(opacity=50); 
  -moz-opacity:0.5; 
  opacity:0.5; 
  position:fixed; 
  left:0px; 
  top:90rpx; 
  z-index:1000;
  /&lt;span class=&quot;ge&quot;&gt;* overflow: hidden; *&lt;/span&gt;/
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Tue, 20 Jun 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/js_wx</link>
				<guid isPermaLink="true">http://localhost:4000/js_wx</guid>
			</item>
		
			<item>
				<title>苹果内购(IAP) 代码流程</title>
				<description>&lt;p&gt;苹果内购，整体来说不好用，支付速度特别慢，虚拟物品还要分成30%，但是虚拟物品在IOS平台上必须用苹果内购，没办法，只能用了。注册流程就不说了，简单说下代码实现流程。&lt;/p&gt;

&lt;p&gt;代码之前，请现在&lt;a href=&quot;https://itunesconnect.apple.com/login&quot;&gt;iTunes Connet&lt;/a&gt;操作，创建应用、创建商品、指定商品价格。注意事项：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1,Bundle ID一定不要搞错&lt;/li&gt;
  &lt;li&gt;2,商品分类（消耗品、不可消耗品、自动更新订阅品、非自动更新订阅品、免费订阅品）创建商品的时候一定要看清楚区别再创建。&lt;/li&gt;
  &lt;li&gt;3,产品id，（一般是字母、数字或下划线），购买商品就是要看产品id&lt;/li&gt;
  &lt;li&gt;4,设置税务和银行卡信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;以下是代码实现&quot;&gt;以下是代码实现&lt;/h3&gt;
&lt;p&gt;1，确认用户是否允许苹果内购&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//添加监听
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)viewDidLoad{
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;super viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKPaymentQueue defaultQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; addTransactionObserver:self];
}

//检查权限  _productId 建议从服务器获取 不建议硬编码
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)buyProdution:(UIButton &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)sender{
    if (&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SKPaymentQueue canMakePayments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;) {
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self toBuy:_productId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    } else {
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self showMessage:@&quot;用户禁止应用内付费购买&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    }
}

//结束之后移除监听
-(void)dealloc
{
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKPaymentQueue defaultQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; removeTransactionObserver:self];
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2，发起购买&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//查询用户购买的产品的信息
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)toBuy:(NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)productId {
    NSArray &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;product = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[NSArray alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; initWithObjects:productId, nil];
    NSSet &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;set = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NSSet setWithArray:product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    SKProductsRequest &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; request = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKProductsRequest alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    initWithProductIdentifiers:set];
    request.delegate = self;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;request start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self showHUD:@&quot;正在购买，请稍后&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}

//成功后的回调
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)productsRequest:(SKProductsRequest &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)request didReceiveResponse:
(SKProductsResponse &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)response {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self hideHUD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    NSArray &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;myProduct = response.products;
    if (myProduct.count == 0) {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self showMessage:@&quot;无产品信息&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    return;
    }
    SKPayment &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; payment = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SKPayment paymentWithProduct:myProduct[0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;];
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKPaymentQueue defaultQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; addPayment:payment];
}

//查询失败后的回调
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)request:(SKRequest &lt;span class=&quot;ge&quot;&gt;*)request didFailWithError:(NSError *&lt;/span&gt;)error {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self hideHUD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self showHUD:@&quot;查询失败&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    NSLog(@&quot;%@&quot;,error);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3，购买后的回调&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void)paymentQueue:(SKPaymentQueue &lt;span class=&quot;ge&quot;&gt;*)queue updatedTransactions:(NSArray *&lt;/span&gt;)
transactions {
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self hideHUD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    for (SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;transaction in transactions)
    {
        switch (transaction.transactionState)
        {
        case SKPaymentTransactionStatePurchased://交易完成
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self completeTransaction:transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
        break;&lt;span class=&quot;sb&quot;&gt;

        case SKPaymentTransactionStateFailed://交易失败
            [self failedTransaction:transaction];
        break;

        case SKPaymentTransactionStateRestored://已经购买过该商品
            [self restoreTransaction:transaction];
        break;

        case SKPaymentTransactionStatePurchasing://商品添加进列表
            [self showMessage:@&quot;正在请求付费信息，请稍后&quot;];
        break;

        default:
        break;
    }
&lt;/span&gt;}

}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4，失败、恢复等操作&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void) failedTransaction: (SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)transaction{&lt;span class=&quot;sb&quot;&gt;

    if (transaction.error.code != SKErrorPaymentCancelled)
    {
        [self showHUD:@&quot;用户取消交易&quot;];
    }else{
        [self showHUD:@&quot;购买失败，请重试&quot;];
    }
    [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
    //购买失败 通知自己服务器
    [self doRequest:@&quot;failed&quot;];
&lt;/span&gt;}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void) restoreTransaction: (SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)transaction
{
    NSLog(@&quot;已经购买过该商品&quot;);
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[SKPaymentQueue defaultQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; finishTransaction:transaction];

}
//恢复购买 （非消耗品的时候 一定要有恢复购买）
-(void) paymentQueueRestoreCompletedTransactionsFinished:
(SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)transaction{
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self doRequest:@&quot;恢复数据&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}
-(void) paymentQueue:(SKPaymentQueue &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;) paymentQueue
restoreCompletedTransactionsFailedWithError:(NSError &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)error{
    NSLog(@&quot;error：%@&quot;， error);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4，购买成功&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (void) completeTransaction: (SKPaymentTransaction &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)transaction
{
    //获取购买凭证
    NSData &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;receiptData = &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;NSData dataWithContentsOfURL:
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[NSBundle mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; appStoreReceiptURL]];
    NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;receiptStr = &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;receiptData base64EncodedStringWithOptions:
    NSDataBase64EncodingEndLineWithLineFeed];&lt;span class=&quot;sb&quot;&gt;

    //通知后台 结束购买
    NSString *productid = transaction.payment.productIdentifier;
    if ([productid length] &amp;gt; 0) {
    [self doPostReceipt:receiptStr withIndex:0];
    }
    [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;常见掉单问题&quot;&gt;常见掉单问题&lt;/h3&gt;
&lt;p&gt;苹果内购最常见问题，掉单。就是你在苹果付款成功，但是自己后台却不知道。我们的解决方法是，购买成功之后，本地记录凭证。通知后台，通知失败，再通知，往复三次。如果最终通知失败，可能因为网络等原因，凭证记录本地，下次启动app再往复通知，直至通知成功。通知成功之后，删掉本地凭证。当然后台也会做自己的判断&lt;/p&gt;

&lt;p&gt;在说一下我们记录和删除凭证吧&lt;/p&gt;

&lt;p&gt;4，记录删除凭证&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//保存交易凭证
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)saveReceipt:(NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)receiptStr{
    //沙盒/appleBuy/订单号.plist     tradeNo是后台生成的订单号
    NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;savedPath = &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;NSString stringWithFormat:@&quot;%@%@.plist&quot;,
    AppleBuyFilePath,&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;appleBuyDic objectForKey:@&quot;tradeNo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;];
    if (appleBuyDic!=nil) {
        NSDictionary &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;dic = @{
            @&quot;tradeNo&quot;:&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;appleBuyDic valueForKey:@&quot;tradeNo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;,
            @&quot;notifyUrl&quot;:&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;appleBuyDic valueForKey:@&quot;notifyUrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;,
            @&quot;receipt&quot;:receiptStr
        
        };
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dic writeToFile:savedPath atomically:YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    }
}

//删除交易凭证
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)deleteReceipt:(NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)tradeNo{&lt;span class=&quot;sb&quot;&gt;

    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSString *savedPath = [NSString stringWithFormat:@&quot;%@%@.plist&quot;,
    AppleBuyFilePath,tradeNo];
    if ([fileManager fileExistsAtPath:savedPath])
    {
        [fileManager removeItemAtPath:savedPath error:nil];
    }
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Fri, 12 May 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/apple-pay</link>
				<guid isPermaLink="true">http://localhost:4000/apple-pay</guid>
			</item>
		
			<item>
				<title>gif 动图支持</title>
				<description>&lt;p&gt;iOS 9.0之后照片支持gif的展示了，简介一下保存gif图的方法 和加载gif图的方法&lt;/p&gt;

&lt;h3 id=&quot;保存-gif-图&quot;&gt;保存 gif 图&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//保存图片
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)saveImageWithData:(NSData &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)imageData{
    if (&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UIDevice currentDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;.systemVersion.floatValue &amp;gt;= 9.0f) {
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[PHPhotoLibrary sharedPhotoLibrary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; performChanges:^{&lt;span class=&quot;sb&quot;&gt;

        PHAssetResourceCreationOptions *options = [[PHAssetResourceCreationOptions 
        alloc] init];
        [[PHAssetCreationRequest creationRequestForAsset] 
        addResourceWithType:PHAssetResourceTypePhoto
         data:[common getNSDataFromUrl:imageUrl] options:options];
        } completionHandler:^(BOOL success, NSError * _Nullable error) {

            [self image:nil didFinishSavingWithError:error contextInfo:nil];

        }];

    }else {
        UIImageWriteToSavedPhotosAlbum([UIImage imageWithData:
        [common getNSDataFromUrl:imageUrl]], 
        self, 
        @selector(image:didFinishSavingWithError:contextInfo:), nil);
    }

&lt;/span&gt;}

//保存之后的提示方法
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)image:(UIImage &lt;span class=&quot;ge&quot;&gt;*)image didFinishSavingWithError:(NSError *&lt;/span&gt;)error
contextInfo:(void &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)contextInfo
{
    if (error != NULL)
    {
    NSString &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;message;
    if (error.code ==-3310) {
        message = @&quot;请到设置隐私开启相册权限&quot;;
    }else{
        message = @&quot;保存失败&quot;;
    }
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NSObject toastMessage:message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    }
    else  // No errors
    {
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NSObject toastMessage:@&quot;已保存至手机相册&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;获取gif图片资源的方法&quot;&gt;获取gif图片资源的方法&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)getImage{
    PHImageManager &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; manager =&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PHImageManager defaultManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    PHImageRequestOptions &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; ops =&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[PHImageRequestOptions alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;init];&lt;span class=&quot;sb&quot;&gt;

    PHAsset * asset = [self.dataArray objectAtIndex:indexPath.row];
    // 下面的回调会返回多次 该属性设置YES 只返回一次，返回的是原图
    ops.synchronous = YES;
    ops.resizeMode = PHImageRequestOptionsResizeModeExact;

    [manager requestImageDataForAsset:asset options:ops
     resultHandler:^(NSData * _Nullable imageData,
      NSString * _Nullable dataUTI, 
      UIImageOrientation orientation,
       NSDictionary * _Nullable info) {
        if (imageData.length){

        //gif 图片
        if ([dataUTI isEqualToString:(__bridge NSString *)kUTTypeGIF]) {
            //这里获取gif图片的NSData数据
            _gifImageData = imageData;
        }
        else {
            //其他格式的图片
            returnImage = [UIImage imageWithData:imageData];

        }

    }else{
        //如果没有获取到imagedata，尝试直接获取图片
        [manager requestImageForAsset:asset targetSize:AssetGridThumbnailSize 
        contentMode:PHImageContentModeAspectFill options:ops
         resultHandler:^(UIImage * result, NSDictionary * info) {
            if (result) {
                returnImage = result;
            }
        }];
    }
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Mon, 01 May 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/iOS_gif</link>
				<guid isPermaLink="true">http://localhost:4000/iOS_gif</guid>
			</item>
		
			<item>
				<title>Node.JS学习笔记</title>
				<description>&lt;h3 id=&quot;node-命令&quot;&gt;Node 命令&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//查看版本
node -v

//命令之后 直接在命令行中 编写脚本（基本不用，知道就行）
$ node
&lt;span class=&quot;gt&quot;&gt;&amp;gt; console.log('Hello World!');&lt;/span&gt;

//当前目录下运行脚本文件 （.js可以省略）
node index.js

//npm版本
npm -v

//命令 安装模块
npm install &lt;span class=&quot;nt&quot;&gt;&amp;lt;Module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;开启node服务器&quot;&gt;开启Node服务器&lt;/h3&gt;

&lt;p&gt;相应的数据类型可以参考&lt;a href=&quot;https://www.oschina.net&quot;&gt;开源中国&lt;/a&gt;中的&lt;a href=&quot;http://tool.oschina.net&quot;&gt;在线工具&lt;/a&gt;中的&lt;a href=&quot;http://tool.oschina.net/commons&quot;&gt;Content-Type(Mime-Type)&lt;/a&gt;对照表。比如常用的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;text/plain字符串  image/jpeg图片 image/png图片 text/css CSS text/html标签&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
var http = require(&quot;http&quot;);

http.createServer(function (request, response) {&lt;span class=&quot;sb&quot;&gt;

    //url仅仅只是一个标示 没有任何意义 从 / 开始，不包含协议和域名
    var url = request.url;
    
    if(url == &quot;/&quot;){
        //发送HTTP头部 状态值: 200  内容类型: text/plain
        response.writeHead(200, {'Content-Type': 'text/plain'});
        
        // 发送响应数据 &quot;Hello World&quot;
        response.write(&quot;Hello World&quot;)
        
        //结束响应
        response.end();
    
    }else{
    
        response.end(&quot;404 Not Found&quot;);

    }

    
    //响应端口 8888
&lt;/span&gt;}).listen(8888);&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;// 终端打印如下信息
console.log('Server running at http://127.0.0.1:8888/');&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;css-图片等资源加载&quot;&gt;CSS 图片等资源加载&lt;/h3&gt;
&lt;p&gt;当浏览器在加载HTML过程中，遇到具有href的link，具有src的script，具有src的img等具有外链的，又需要在内部使用的资源，这个时候，浏览器会对该资源指向的连接自动发起请求。&lt;/p&gt;

&lt;p&gt;utf-8是字符编码，如果是音乐、图片、视频等文件的时候，一定不要指定该编码，直接发送二进制数据就行了&lt;/p&gt;

&lt;h3 id=&quot;node文件操作&quot;&gt;Node文件操作&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
var fs = require(&quot;fs&quot;);

//文件操作中，路径如果是 / 开始，则会到当前脚本所在的磁盘目录下去寻找，而不是当前目录
fs.writeFile(&quot;./a.txt&quot;,&quot;Hello Node&quot;,function(err){
    if(err){
        throw err  //这样会程序崩溃，只是调试用的，release版本不能这样
    }&lt;span class=&quot;sb&quot;&gt;

    console.log(&quot;saved&quot;)
&lt;/span&gt;})

fs.readFile(&quot;./a.txt&quot;,&quot;utf8&quot;,function(err,data){
    if(err){
        throw err
    }
    
    console.log(data)
})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;node事件驱动&quot;&gt;Node事件驱动&lt;/h3&gt;
&lt;p&gt;Node.js 使用事件驱动模型，类似于观察者模式。Node.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
var events = require(&quot;events&quot;)

//创建eventEmitter对象
var eventEmitter = new events.EventEmitter()

//创建事件处理程序
var connectHandler = function connect(){
    console.log(&quot;连接成功&quot;)&lt;span class=&quot;sb&quot;&gt;

    //触发data_received事件
    eventEmitter.emit(&quot;data_received&quot;)
&lt;/span&gt;}

//绑定事件
eventEmitter.on(&quot;connection&quot;,connectHandler)&lt;span class=&quot;sb&quot;&gt;

    // 使用匿名函数绑定 data_received 事件
    eventEmitter.on('data_received', function(){
    console.log('数据接收成功。');
&lt;/span&gt;});

// 触发 connection 事件
eventEmitter.emit('connection');

console.log(&quot;程序执行完毕。&quot;);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;持续更新中……&lt;/p&gt;

</description>
				<pubDate>Mon, 16 Jan 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/nodejs</link>
				<guid isPermaLink="true">http://localhost:4000/nodejs</guid>
			</item>
		
			<item>
				<title>关于web后端</title>
				<description>&lt;p&gt;以前专业写前端，后端技术不够扎实，发现这样对我的限制特别大，不仅在开发阶段，数据基本全是假数据，也很难做动态网页。所以就想学一门后端语言，补一下自己的短板，于是我把目标瞄准了Java，毕竟Java能使用的场景太多了。Java的语言本身倒是不难，但服务端的环境配置真是有点绕啊。于是在我还没看完Java的基础语法的时候，就果断弃了。&lt;/p&gt;

&lt;p&gt;后面开始看PHP，PHP是简单，当然我是说入门简单。毕竟任何一门语言本身，都是深奥而伟大的存在。但是刚开始我就是为了配合前端，简单入门再加上google和度娘，也算勉强够了。而且，PHP有服务端的集成环境，方便入门阶段的学习。在这里推荐一下一个MAC版的集成环境XAMPP，希望对大家能有所帮助。&lt;/p&gt;

&lt;p&gt;早就听说过Node.js环境下，JS也可以写后端了，一直想学习呢，就是没有大块的时间（这个借口只值5分）。最近一段时间了解了一下，发现Node.js真是个好东西，虽然只有CLI没有GUI工具，但是开发还是很方便的。所以我决定要好好看一看Node.js了。不过长时间不用，还是会遗忘，PHP中间隔了两个月就忘的差不多了(笑哭)。这个问题怎么处理呢？很严重。。。。这种事没有特别有效的方法，只能以后多用点了。等有时间，我把PHP和Node.js的常用API整理一下，写个博客吧，也避免遗忘，慢慢加油吧！！&lt;/p&gt;

&lt;p&gt;先简单记录几个Node.js的学习网站&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nodejs.cn&quot;&gt;Node.js中文网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.runoob.com/nodejs/nodejs-tutorial.html&quot;&gt;Node.js 菜鸟教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cnodejs.org&quot;&gt;Node.js中文论坛&lt;/a&gt;中的新手入门可以看看，挺好的&lt;/p&gt;

</description>
				<pubDate>Sun, 15 Jan 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/server</link>
				<guid isPermaLink="true">http://localhost:4000/server</guid>
			</item>
		
			<item>
				<title>Swift与Objective-C区别简析(二)</title>
				<description>&lt;h2 id=&quot;函数重载-和-另一种-for-循环&quot;&gt;函数重载 和 另一种 for 循环&lt;/h2&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
///重载: 函数名相同, 函数类型不同(参数/返回值不同), 构成重载, 调用的时候,
    根据参数确定调用哪个函数
func helloworld(a:Int)-&amp;gt;Int{
    return a &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; 100
}
print(helloworld(5))

func helloworld(a:NSString)-&amp;gt;Int{
    return 100
}
print(helloworld(&quot;123&quot;))&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//区间, 0...10 = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0 10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    0..&amp;lt;10 = &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;0 10)
for i  in 0..&amp;lt;10{
    print(&quot;i = &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;i)&quot;)
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;枚举&quot;&gt;枚举&lt;/h2&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//OC中的枚举值 是int类型, 也就是 0,1,2,3.. swift中的枚举值, 不再是int类型了, 就是枚举值
enum Direction : String{
    case East = &quot;东&quot;
    case west = &quot;西&quot;
    case south = &quot;南&quot;
    case North = &quot;北&quot;
}

var dir = Direction.East;
print(dir)
//swift中的快捷语法, 如果给一个变量赋值过一次枚举值, 下次进行赋值就直接使用 . 语法进行赋值
dir = .south
print(dir)&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//枚举值的原始值
enum Season : Int {
    case Spring = 100
    case Summer
    case Autumn
    case Winter
}
var se = Season.Spring

//rawValue, 原始值
print(se.rawValue)

//通过枚举值的原始值找到枚举值
let sea = Season(rawValue: 100)
print(sea)&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//隐士解析
if let s = sea {
    print(&quot;s = &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;s)&quot;)
} else {
    print(&quot;无法找到枚举值&quot;)
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;类-和-结构体&quot;&gt;类 和 结构体&lt;/h2&gt;
&lt;p&gt;//A = B&lt;/p&gt;

&lt;p&gt;值类型 : 赋值完成以后, B修改, A 不变. 枚举值和结构体就是值类型, 类似copy 的过程&lt;/p&gt;

&lt;p&gt;引用类型 : 赋值完成以后, B 修改, A随着B修改. 类就是引用类型, 类似 retain 的过程&lt;/p&gt;

&lt;h3 id=&quot;结构体-值类型&quot;&gt;结构体 值类型&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
struct Person{
    var height = 1.8
    var weight = 75
    var age = 25
}
//实例化结构体: ()是结构体的一个初始化方法
var p = Person()
p.weight = 90
print(&quot;他的体重是 &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;p.weight) Kg&quot;)

//逐一构造器：swift 中 构造 = alloc..init ，析构 = 释放 = dealloc
var p1 = Person(height: 1.6, weight: 60, age: 18)
print(&quot;她的身高为&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;p1.height), 体重为&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;p1.weight), 年龄为&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;p1.age)&quot;)&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;var p2 = p1
p1.height = 180
print(&quot;p2的.height= &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;p2.height)&quot;)  //1.6

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;类-引用类型&quot;&gt;类 引用类型&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
class Student{
    var num = 78945
    var name = &quot;路飞&quot;
    var goodF = &quot;东海&quot;
}
//系统没有给类自动添加逐一构造器
var p = Student()
p.goodF = &quot;北海&quot;
print(p.goodF)

var p1 = p
p.goodF = &quot;西海&quot;
print(&quot;p1的.height= &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;p1.goodF)&quot;)  //西海。跟struct不一样&lt;span class=&quot;sb&quot;&gt;




&lt;/span&gt;//属性
//类名属性: static 修饰，（用类名调用）
//存储属性: 用来 存值 和 取值
//计算属性: 计算属性的值。 通过get方法, 用于获取其他元素。 set方法一般用来处理事务。
    只写get , 这个属性是只读的; 不能只写set
class Animal{&lt;span class=&quot;sb&quot;&gt;

    //类名属性：是否有腿 
    static var hasLeg = true

    //存储属性
    var type = &quot;Elephant&quot;
    var weight = 1000

    //计算属性
    var leg  : Int{
        get{ //get 方法
            if type == &quot;Elephant&quot;{
                return 4
            } else if type == &quot;人&quot; {
                return 2
            } else {
                return 3
            }
        }
        
        //set 方法需要一个 新值  参数
        set(newValue){
            if(newValue &amp;gt;= 4){
                print(&quot;不是人&quot;)
            } else{
                print(&quot;有可能是人&quot;)
            }

        }
    }
&lt;/span&gt;}

var per = Animal()
per.type = &quot;人&quot;
print(&quot;人的腿的个数是&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;per.leg)&quot;)

per.leg = 10
print(&quot;人的腿的个数是&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;per.leg)&quot;)

print(&quot;人是否有腿: &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;Animal.hasLeg)&quot;)&lt;span class=&quot;sb&quot;&gt;



&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;例子-计算中心点结构体&quot;&gt;例子： 计算中心点（结构体）&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
struct Rect {&lt;span class=&quot;sb&quot;&gt;

    var x = 100.0
    var y = 100.0
    var width = 100.0
    var height = 100.0

    //属性在类内部使用的时候, 可以省略self.
        只有设计到参数名字和属性相同的时候, 建议加上 self.以示区分
    var centerX :Double {
        get {
            return x + width / 2
        }
        set{
            width = (newValue - x) * 2
        }

        }
        var centerY:Double {
        get {
            return y + height / 2
        }
        set {
            height = (newValue - y)*2
        }
    }
&lt;/span&gt;}

var rect  = Rect()
print(&quot;centerX = &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;rect.centerX)&quot;)&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;属性观察器&quot;&gt;属性观察器&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//属性观察器
class Plant{
    //类型
    var type = &quot;绿色植物&quot;{
        willSet(newType){
            print(&quot;新值为 = &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;newType), 当前值 = &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;type)&quot;)
        }didSet(oldType){
            print(&quot;旧值 = &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;oldType)&quot;)
        }
    }
    //是否开花
    var hasFlower : Bool = false {
        willSet{
            print(&quot;新值为&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;newValue), 当前值为&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;hasFlower)&quot;)
        } didSet {
            print(&quot;旧值为&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;oldValue)&quot;)
        }
    }
}

var appleTree = Plant();
appleTree.type = &quot;苹果树&quot;
appleTree.hasFlower = true;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;方法&quot;&gt;方法&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//结构体方法
struct Apple {
    var brand = &quot;apple&quot;
    var price = 14000
    func action(name:String){
        print(&quot;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;name)抽奖中了一个&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;brand)的, 价值¥&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;price)&quot;)
    }
}
var app = Apple()
app.action(&quot;王❀&quot;)

//方法
class Computer {
    var brand = &quot;大船&quot;
    var price = 6888
    func des(name:String){
        print(&quot;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;name)造了&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;brand), 花了￥&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;price)&quot;)
    }
}

var compu = Computer()
compu.des(&quot;路飞&quot;)&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//类方法
class Car {
    static func speed(){
        print(&quot;速度是71迈&quot;)
    }
}
Car.speed()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;构造方法&quot;&gt;构造方法&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//除了可选类型, 在构造的过程中, 必须给各个各个属性赋初始值
class Hero{
    var age : Int?
    var name = &quot;孙悟空&quot;
    var equipment = &quot;金箍棒&quot;
    var saddleHorse :String
    
    init(){
        saddleHorse = &quot;筋斗云&quot;
    }
    
    //自定义一个构造器
    init(name:String, equipment:String, saddleHorse:String){
        self.name = name
        self.equipment = equipment
        self.saddleHorse = saddleHorse;
    }
}

let 孙悟空 = Hero()
print(&quot;孙悟空的坐骑是&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;孙悟空.saddleHorse)&quot;)

let 大禹 = Hero(name: &quot;大禹&quot;, equipment: 孙悟空.equipment, saddleHorse: &quot;11路公交车&quot;)
print(大禹.name, 大禹.equipment, 大禹.saddleHorse)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;便利构造器必须调用自身的指定的构造器&quot;&gt;便利构造器：必须调用自身的指定的构造器&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//定义属性以及构造器的方法
class Film {
    var name = &quot;大闹天空&quot;
    var type = &quot;myth&quot;
    var time = &quot;12.31&quot;
    var price = 20
    //自定义构造器
    init(name:String, type:String, time:String, price:Int){
        self.name = name
        self.type = type
        self.time = time
        self.price = price
    }&lt;span class=&quot;sb&quot;&gt;

    func description(){
        print(&quot;电影名: \(self.name), 类型: \(self.type),
            上映时间: \(self.time), 票价: \(self.price)&quot;)
    }

    //便利构造器：和 OC 的便利构造器不是一类, OC的是类方法
    //convenience: 在构造器方法前添加convenience代表当前的构造器是便利构造器
    convenience init(){
        self.init(name:&quot;恶棍&quot;, type:&quot;傲笑&quot;, time:&quot;12.28&quot;, price:30)
    }
&lt;/span&gt;}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;let film = Film(name: &quot;挪吒脑海&quot;, type: &quot;神话&quot;, time: &quot;12.30&quot;, price: 11)
film.description()

let 恶棍天使 = Film()
恶棍天使.description()&lt;span class=&quot;sb&quot;&gt;



&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;继承-与-重写&quot;&gt;继承 与 重写&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//定义一个父类
class Teacher {
    var academic = &quot;教授&quot;
    var offer = 8888
    var num :Int{
        get{
            return 100
        } set{&lt;span class=&quot;sb&quot;&gt;

        }
    }

    func teacher (){
        print(&quot;某\(academic)的薪资是\(offer)&quot;)
    }
    
    //final 方法禁止被重写
    final func study(bookName:String){
        print(&quot;某\(academic), 刻苦钻研\(bookName)&quot;)
    }
&lt;/span&gt;}

//定义一个子类 ： 讲师
class Lecturer : Teacher{
    var industry = &quot;iOS&quot;
    //override, 重写父类的方法
    override func teacher() {
        super.teacher()
        print(&quot;从事行业是教授&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;industry)&quot;)
    }

}

let lec = Lecturer()
lec.academic = &quot;两院院士&quot;
lec.offer = 10000
lec.teacher()
lec.study(&quot;论持久战&quot;)

//重写属性：把存储属性重写为计算属性，不能把计算属性改为存储属性
class ChildrenTeacher:Teacher {
    override var offer:Int{
        get{
            return 9999
        } set {&lt;span class=&quot;sb&quot;&gt;

        }
    }
&lt;/span&gt;}
let child = ChildrenTeacher()
child.teacher()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Tue, 22 Nov 2016 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/Swift-OC</link>
				<guid isPermaLink="true">http://localhost:4000/Swift-OC</guid>
			</item>
		
	</channel>
</rss>
