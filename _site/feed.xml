<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>wanglizhen</title>
		<description>Welcome to wanglizhen 的主页! - iOS开发 iOS技术探讨 开发中的bug记录 微信小程序开发技术探讨与bug记录 前端 html、js、css 开发  IT技术探讨 共同学习 共同进步</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>FreeMarker</title>
				<description>&lt;h3 id=&quot;总体结构&quot;&gt;总体结构&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Welcome!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Greet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;his&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;her&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome ${user}!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;We have these animals:
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;[BR]
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;animals&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;${animal.name} for ${animal.price} Euros
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;list&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;引入&quot;&gt;引入&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;一个重要的规则就是路径不应该包含大写字母，
为了分隔词语， 使用下划线 _，就像 wml_form (而不是 wmlForm )。

&amp;lt;#import &quot;../../../include/layout_wap.ftl&quot; as layout /&amp;gt;
&amp;lt;@layout.standard title=&quot;大点&quot; cssMap={&quot;app&quot;:&quot;course/course_wap&quot;}&amp;gt;

    &amp;lt;style&amp;gt;
    // css
    &amp;lt;/style&amp;gt;
    &amp;lt;script&amp;gt;
    // js
    &amp;lt;/script&amp;gt;

&amp;lt;/@layout.standard&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;公用样式&quot;&gt;公用样式&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;#include &quot;../include/position.ftl&quot; /&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;定义变量&quot;&gt;定义变量&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;#assign dk_list=[
    {&quot;uid&quot;:&quot;1&quot;,&quot;name&quot;:&quot;曹雁飞&quot;,&quot;des&quot;:&quot;曹雁飞，女，教育学原&quot;},
    {&quot;uid&quot;:&quot;2&quot;,&quot;name&quot;:&quot;曹雁飞&quot;,&quot;des&quot;:&quot;曹雁飞，女，教育学原&quot;},
    {&quot;uid&quot;:&quot;3&quot;,&quot;name&quot;:&quot;曹雁飞&quot;,&quot;des&quot;:&quot;曹雁飞，女，教育学原&quot;},
] /&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;列表&quot;&gt;列表&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;#list dk_list as item&amp;gt;

    &amp;lt;div class=&quot;celebrity-item&quot;&amp;gt;

        ${item_index}

        &amp;lt;div class=&quot;celebrity-info&quot;&amp;gt;
            &amp;lt;div onclick=&quot;gotoUserForJson(${item.title},${item.uid})&quot;&amp;gt;
                &amp;lt;img src=&quot;https://avatar2.citysbs.com/m.gif&quot;&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;celebrity-name&quot;&amp;gt;${item.name}&amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;celebrity-introduce&quot;&amp;gt;${item.title}&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;celebrity-desc&quot;&amp;gt;
            &amp;lt;div class=&quot;desc&quot;&amp;gt;
            ${item.des}
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

&amp;lt;/#list&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;判断&quot;&gt;判断&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;#if centerHotText?? &amp;amp;&amp;amp; boardList?exists &amp;amp;&amp;amp; boardList?size gt 0 &amp;gt;

&amp;lt;#elseif board_index == 1 &amp;gt;

&amp;lt;#else&amp;gt;

&amp;lt;/#if&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;内建函数&quot;&gt;内建函数&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;#function createUrl url params={}&amp;gt;
    &amp;lt;#assign tUrl = urlCollect.forumFrontDomainNoHttps+ url &amp;gt;
    &amp;lt;#if (params?size&amp;gt;0)&amp;gt;
        &amp;lt;#assign tUrl = tUrl+&quot;?&quot;&amp;gt;
        &amp;lt;#assign keys = params?keys&amp;gt;
        &amp;lt;#list keys as key&amp;gt;
            &amp;lt;#assign tUrl = tUrl + key + &quot;=&quot; + params[key] + &quot;&amp;amp;&quot;&amp;gt;
        &amp;lt;/#list&amp;gt;
        &amp;lt;#assign tUrl = tUrl?substring(0, tUrl?length-1)&amp;gt;
    &amp;lt;/#if&amp;gt;
    &amp;lt;#return tUrl&amp;gt;
&amp;lt;/#function&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;表达式&quot;&gt;表达式&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;字符串切分： 包含结尾： name[0..4]，
           不包含结尾： name[0..&amp;lt;5]，
           基于长度(宽容处理)： name[0..*5]，
           去除开头： name[5..]

序列切分：包含结尾： products[20..29]， 
        不包含结尾： products[20..&amp;lt;30]，
        基于长度(宽容处理)： products[20..*10]，
        去除开头： products[20..]
        
&amp;lt;#list seq[1..3] as i&amp;gt;${i}&amp;lt;/#list&amp;gt;

连接： passwords + { &quot;joe&quot;: &quot;secret42&quot; }
&amp;lt;#list [&quot;Joe&quot;, &quot;Fred&quot;] + [&quot;Julia&quot;, &quot;Kate&quot;] as user&amp;gt;${user}&amp;lt;/#list&amp;gt;
&amp;lt;#assign ages = {&quot;Joe&quot;:23, &quot;Fred&quot;:25} + {&quot;Joe&quot;:30, &quot;Julia&quot;:18}&amp;gt;

内建函数： name?upper_case, path?ensure_starts_with('/')
方法调用： repeat(&quot;What&quot;, 3) 如：${repeat(&quot;Foo&quot;, 3)}


处理不存在的值：
默认值： name!&quot;unknown&quot; 或者 (user.name)!&quot;unknown&quot; 或者 name! 或者 (user.name)!
检测不存在的值： name?? 或者 (user.name)??
赋值操作： =, +=, -=, *=, /=, %=, ++, --

使用 &amp;gt;= 和 &amp;gt; 的时候有一点小问题。FreeMarker解释 &amp;gt; 的时候可以把它当作FTL标签的结束符。
为了避免这种问题，可以使用 lt 代替 &amp;lt;， lte 代替 &amp;lt;=， gt 代替 &amp;gt; 还有 gte 代替 &amp;gt;=， 
例如 &amp;lt;#if x gt y&amp;gt;。
另外一个技巧是将表达式放到 圆括号 中， 尽管这么写并不优雅，
例如 &amp;lt;#if (x &amp;gt; y)&amp;gt;。

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;自定义指令&quot;&gt;自定义指令&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;#macro greet person color&amp;gt;
    &amp;lt;font size=&quot;+2&quot; color=&quot;${color}&quot;&amp;gt;Hello ${person}!&amp;lt;/font&amp;gt;
&amp;lt;/#macro&amp;gt;

&amp;lt;@greet&amp;gt;&amp;lt;/@greet&amp;gt;

&amp;lt;@greet color=&quot;black&quot; person=&quot;Fred&quot;/&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;嵌套内容&quot;&gt;嵌套内容&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//&amp;lt;#nested&amp;gt; 可以多次被调用

&amp;lt;#macro do_thrice&amp;gt;
    &amp;lt;#nested&amp;gt;
    &amp;lt;#nested&amp;gt;
    &amp;lt;#nested&amp;gt;
&amp;lt;/#macro&amp;gt;

&amp;lt;@do_thrice&amp;gt;
    Anything.
&amp;lt;/@do_thrice&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;空间命名&quot;&gt;空间命名&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;#macro copyright date&amp;gt;
    &amp;lt;p&amp;gt;Copyright (C) ${date} Julia Smith. All rights reserved.
    &amp;lt;br&amp;gt;Email: ${mail}&amp;lt;/p&amp;gt;
&amp;lt;/#macro&amp;gt;
&amp;lt;#assign mail = &quot;jsmith@acme.com&quot;&amp;gt;


&amp;lt;#import &quot;/lib/my_test.ftl&quot; as my&amp;gt;
&amp;lt;#assign mail=&quot;fred@acme.com&quot;&amp;gt;
&amp;lt;@my.copyright date=&quot;1999-2002&quot;/&amp;gt;

不一样
${my.mail} jsmith@acme.com
${mail} fred@acme.com


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Thu, 03 Jan 2019 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/FreeMarker</link>
				<guid isPermaLink="true">http://localhost:4000/FreeMarker</guid>
			</item>
		
			<item>
				<title>canvas简单学习</title>
				<description>&lt;h3 id=&quot;基础&quot;&gt;基础&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//初识canvas：不同的canvas需要不同的id，不要循环创建 宽高写在标签里面 绘图 有先后有顺序

&amp;lt;canvas id=&quot;canvasId&quot;&amp;gt;&amp;lt;span&amp;gt;不支持canvas的浏览器&amp;lt;/span&amp;gt;&amp;lt;/canvas&amp;gt;

var oC = document.getElementById('canvasId')
var oGc = oC.getContext('2d')
//0，基本属性
oGc.fillStyle = 'red';//填充颜色
oGc.strokeStyle = 'red';//边框颜色
oGc.lineJoin = 'bevel'//方形的四个角 bevel斜角 round圆角
oGc.lineCap = 'round'//画线的两端 round圆角 square（会变长，长度多出为宽一半的值）

//1，画方形 fill填充 起点 宽高  oGc.rect() oGc.fill() == fillRect()
oGc.fillRect(10,10,50,50)
oGc.strokeRect(70.5,10.5,60,60)


//2，清除画布 坐标 和 宽高。如果需要绘制动画，则需要在每次绘制之前清空上一次的绘画
oGc.clearRect(20,20,10,20) 

//3，画线 或者 三角
oGc.beginPath()
oGc.moveTo(180,10)
oGc.lineTo(220,10)
oGc.lineTo(150,50)
// oGc.closePath() //闭合  如果开始和闭合联合使用，可以避免属性影响多个绘图
oGc.stroke()

//4，画圆 save restore
oGc.save()
oGc.strokeStyle = 'blue'; // save restore 闭合使用，使得fillStyle只在其中起作用
oGc.moveTo(350,50)
oGc.arc(350,50,50,-90*Math.PI/180,30*Math.PI/180,false) //坐标 半径 起始弧度：默认3点钟方向 结束弧度 旋转方向：默认false顺时针
// oGc.closePath() //可选
oGc.stroke()
oGc.restore()

//5，曲线
oGc.moveTo(10,180) //起点
oGc.strokeStyle = 'blue';
oGc.arcTo(10,100,100,100,20) //两个点  20为半径内切圆切掉
oGc.stroke()

//6，贝塞尔曲线
// quadraticCurveTo(dx,dy,x1,y1) //加起点 控制点拉伸 终点
// bezierCurveTo(dx1,dy1,dx2,dy2,x1,y1)//加起点 控制点拉伸  控制点拉伸 终点


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;动态绘图-变换&quot;&gt;动态绘图 变换&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//动态绘制
num = 0
oGc.fillRect(0,100,50,50)
setInterval(function(){
    num++;
    oGc.clearRect(0,100,400,300) //清空上次的绘制
    oGc.fillRect(0+num,100+num,50,50)
},50)

//变换 save restore clearRect setInterval 配合使用 完成动画
// translate(x,y) //变换起点
// rotate(45*Math.PI/180) //旋转
// scale(2,3) //宽2倍 高3倍

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;绘制图片-和-图片背景&quot;&gt;绘制图片 和 图片背景&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var myImg = new Image()
myImg.src = 'a.png'
myImg.onload = function(){
    // draw1(this)
    draw2(this)
}
function draw1(obj){
    //宽高不写 会自适应
    oGc.drawImage(obj,10,10,200,100)
}
function draw2(obj){
    //repeat repeat-x repeat-y no-repeat
    var bg = oGc.createPattern(obj,'repeat-x')
    oGc.fillStyle = bg
    oGc.fillRect(0,0,400,400)
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;渐变&quot;&gt;渐变&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//线性 两个点
// var obj  = oGc.createLinearGradient(100,100,200,200)
//放射性渐变的 圆坐标，圆半径  圆坐标，圆半径
var obj  = oGc.createRadialGradient(200,200,100,200,200,50)

obj.addColorStop(0,&quot;#f00&quot;)
obj.addColorStop(1,&quot;#0f0&quot;)
oGc.fillStyle = obj
oGc.fillRect(100,100,200,200)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;绘制文本&quot;&gt;绘制文本&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//第二个参数可以随便写 但是一定要写
oGc.font = '50px impact'
//左右 默认居左 end right center
oGc.textAlign = 'left'
//默认alphabetuc 不是最上边的，一般会改掉 top middle bottom
oGc.textBaseline = 'top'
//空心文本 开始绘制的点，与textAlign  textBaseline 相关
oGc.strokeText('文本绘制',0,0)   

// 阴影 
oGc.shadowOffsetX = 10;
oGc.shadowOffsetY = 10;
//默认颜色 （0，0，0，0）
oGc.shadowColor = &quot;#00f&quot;;
//模糊值
oGc.shadowBlur = 3;

// 获取文本的宽，不能获取高 高就是文字的大小 可以做一些居中
var w = oGc.measureText('文本绘制').width
oGc.fillText('文本绘制',(400-w)/2,(400-60)/2)


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;像素&quot;&gt;像素&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//像素data 是一个数组，四位表示一个像素(r,g,b,a)，因此100x100的宽高，数组长度应该是40000
oGc.getImageData(x,y,w,h)
oGc.putImageData(x,y,w,h)
//创建一个新的 像素区域
var newImg = oGc.createImageData(w,h)
oGc.putImageData(newImg,x,y)

可以做马赛克 倒影 反转等

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;合成&quot;&gt;合成&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//导出图片
let imgSrc = oC.toDataURL
//全局 globalAlpha
//oGc.globalCompositeOperation = 'xor'

//事件操作 判断是否在canvas绘制区域
oGc.isPointInPath(x,y)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Tue, 11 Sep 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/canvas</link>
				<guid isPermaLink="true">http://localhost:4000/canvas</guid>
			</item>
		
			<item>
				<title>jquery常用方法</title>
				<description>&lt;h3 id=&quot;使用--或者-jquery-牛人强哥版&quot;&gt;使用 $() 或者 jQuery() ：牛人强哥版&lt;/h3&gt;
&lt;h3 id=&quot;1-初见&quot;&gt;1. 初见&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;toggle(1000)：切换隐藏和显示，可以加时间

$(img).hover(function(){
    this.src = “a.png”
})

$(this).animate(function(){
    ‘margin-left’:’0px’;
},1000)


$(img):大部分已经内涵遍历了，会加在每个标签下面了
$(this).next() 下一个标签
$(“#id1 option:selected”).clone().appendTo(“#id2”)
clone()克隆一个标签
appendTo 添加到 / append添加
//点击
$(‘#btn’).click(function(){

})

js对象和jquery对象 的方法不能共用

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;2-js对象和jquery的区别&quot;&gt;2. js对象和jquery的区别&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//jquery就是js 中new的一个最基本的object对象,对象链式开发
function $(){
    Obj = new Object()
    Obj.say = function(){
        return this
    }
    Obj.run = function(){
        return this
    }

    return Obj
}

//使用
$().say().run()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-js和jquery转化&quot;&gt;3. js和jQuery转化&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;js对象可以和jquery对象可以相互转换

var imgObj = document.getEle..
$(imgObj).click(function(){
    this.src = ‘x.png’
    $(this).next().attr({‘src’:’x.png’})
    //方法体里面的this还是dom对象 这的this和onclick事件里面的this一样的,谁简单用谁
}) 
$(‘img’).html(). //innerHtml相同
// jquery没有outHtml, $(‘img’)[0].outHtml() 或者 $(‘img’)get(0).outHtml() 
//get()就是jquery对象转化的js对象 get的参数可以不写


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-核心方法&quot;&gt;4. 核心方法&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//属性 获取dom对象的个数
size() /.length 
get()
each()
$(‘h1’).each(function(i){
    //遍历
    $(‘h1’).get()[i].setAttribute(‘num’:i)
    //或者
    $(this).attr({‘num’:i})
})
$(‘h1’).click(function(i){
    this.innerHtml = this.getAttribute(‘num’)
    //或者
    $(this).html($(this).attr(‘num’))
})

//index()搜索匹配的元素 并返回索引值
let idx = $(“.menu li’).index(‘.menu li’)
$(“.info p’)eq(idx).show()
$(“.info p’).not($(“.info p’).eq(idx)).hide()
$(‘#aaa’).css({‘background’:”#fefefe”})

//往jquery对象身上赋值，比动标签好，最好不要用attr,用data() 
$(this).data({‘num’:i})
$(this).data(‘num’)


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;5-选择器&quot;&gt;5. 选择器&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1，基础
#id /.class / ele /  sel1,sel2（sel1和sel2）*所有
2，层级 
ancestor descendant  空格后代关系
parent  &amp;gt; child   &amp;gt;父子关系
prev + next   +同等级别后面的
prev ~ siblings   ~同等级别后面的所有标签
3，基本
h1:first
h1:last
h1:not(:first)
h1:even 偶数
h1:odd 奇数
h1:eq(2)
h1:gt(3) 大于
h1:lt(3) 小于
4，内容
div:has(p) 找到含有p的div
h1:empty 体内为空的标签
h1:parent 匹配有孩子（空格也算）的父亲
5，属性
h1[name][age] 都可以连用
h1[name] 有name属性
h1[name=user1] 等于 这里不是两个等号
h1[name!=user1] 不等于user1
[name^=user1] user1开头
[name$=user1] user1结尾
[name*=er] [name*=er] 包含er的
6，子元素
nth-child（从1开始）
first-child。
所有符合条件的第一个 $(‘.divs h1:first’)
所有符合条件的每一个 $(‘.divs h1:first-child’)
last-child
only-child 只含有一个子元素的子元素
7，表单
:input  加冒号一次找到搜有表单元素
:text
:radio
...
8，表单属性
:checked
:selected
...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;6筛选&quot;&gt;6.筛选&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//跟选择器很像，都是为了找到元素，但是当有$(this) 的时候，用筛选就比较方便了
1，过滤
eq()
first()
last()
not()
slice(1,4)  //1,2,3 不包括最后一个

2，查找
children()
parent()
find()  //找到后代里面所有的
next()
nextAll()
prev()
prevAll()
siblings()  //前后所有的兄弟

3，串联
add()  //$(‘h1’).add(‘p’)找h1的时候 顺便把p也找到
andSelf()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;7属性选择器&quot;&gt;7.属性选择器&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1，属性
attr()
attr({})
$(this).attr({‘src’:’a.png’})

2，CSS类
addClass()
removeClass()
toggleClass()  //加/减

3，HTML代码
html()
html(val)

4，文本(标签里面的文本)
text()
text(val)

5，值(表单)
val()
val(val)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;8文档处理&quot;&gt;8.文档处理&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1，内部插入 （内部）
append() //标签直接位置移动，原来的位置就没了。 html拷贝全部，然后黏贴，原来的位置还是有的
appendTo()
prepend() //前插入
prependTo()

2，外部插入（兄弟）
after() //（最后面）
instertAfter() //（本元素紧挨着的后面）
before()
instertBefore()

3，包围
wrap() //$(‘p’).wrap(‘&amp;lt;a&amp;gt;&amp;lt;/a&amp;gt;’) 外包围 &amp;lt;a&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/a&amp;gt; 每一个都包围
wrapInner() //内包围
wrapAll()  //查到所有的，总的包围一下 

4，替换
replaceWith()  //$(‘p’).replaceWith(‘&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;’)//每个都替换掉
replaceAll()   //$(‘&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;’).replaceWith(‘p’)

5，删除（用的不多）
empty()  //内容清空
remove() //标签移除 标签对象返回保留，还是可以用的，但是他的事件方法、属性都移除干净了
detach() //事件 属性 还有保留

6，复制
clone()  //只能克隆标签本身 不能克隆事件
clone(ture)  //事件也克隆了

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;9css处理&quot;&gt;9.css处理&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;offset() //偏移 获取坐标
position() //获取相对定位的标签的坐标
scrollTop(val) //判断已经移动的高度

$(window).width //可视区域宽高
$(document).width //文档总宽度高
$(window).scrollTop //屏幕已经滚动的高


尺寸
height() //等于clientHeight 如果需要下载 一般在 img.onload(){ 里面获取 }
width()
innerHeight() //包含padding
innerWidth()
outerHeight() //再加边框
outerWidth()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;10事件&quot;&gt;10.事件&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1，原on开头的方法，去掉on之后的事件，jQuery都支持。

2，页面载入 ，js加载时机
a，dom加载完毕，js直接放在body之后就好了
b，静态资源加载完毕 onload 当中 $(window).load(function(){ })
c，$(fn)  jQuery中 $(function(){ });之中使用
d，$(document).ready(fn) //基本已经废弃 使用上面的方法


3，事件处理
bind()  //$(‘h1’).bind(‘click’,function(){})
unbind(‘click’) //如不传参数，则解除所有事件
one() //执行一次 立刻解除

事件委派
live() //动态添加的标签 添加事件绑定，此处不能用bind()
die()

事件切换
hover() //鼠标移入移出 两个函数循环调用
toggle() //点击的时候 两个函数 循环调用

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;11效果&quot;&gt;11.效果&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mousedown等等，会区分鼠标的哪个按键，并且把右键菜单拦截掉，原生事件return false 会禁止掉默认事件

show(1000)
hide()
slideUp(1000) //向上滑出
slideDown(5000)
slideToggle() //上出/下入
fadeOut(1000) //淡出
fadeIn(800) //淡入
fadeTo(800,0.5) //淡出到0.5的透明度
animate({},1000). //自定义动画

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;12ajax&quot;&gt;12.Ajax&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$.get(url,data,function(res){})
$.post(url,data,function(res){})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;13工具&quot;&gt;13.工具&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$.isArray()
$.isFunction()
$.isEmptyObject()
$.trim() //左右去空格
$.param() //把json对象转化成url的字符串
$(‘form’).serialize() //把表单的字符串转成json请求的字符串

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Thu, 19 Jul 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/jquery</link>
				<guid isPermaLink="true">http://localhost:4000/jquery</guid>
			</item>
		
			<item>
				<title>promise初见</title>
				<description>&lt;h3 id=&quot;基本用法&quot;&gt;基本用法&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function fetch() {
    return new Promise((resolve, reject) =&amp;gt; {
        setTimeout(() =&amp;gt; {
            reject('请求失败');
        }, 1000)
    })
}

fetch()
    .then(
        function (data) {
            //成功的处理
            console.log('请求处理-0');
            console.log(data + &quot;-0&quot;);
        },
        function (reason, data) {
            //失败的处理
            console.log('触发异常-2');
            console.log(reason + &quot;-2&quot;);
        }
    )

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;常用写法-resolve&quot;&gt;常用写法 resolve()&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//做饭
function cook() {
    console.log('开始做饭。');
    var p = new Promise(function (resolve, reject) {        //做一些异步操作
        setTimeout(function () {
            console.log('做饭完毕！');
            resolve('鸡蛋炒饭');
        }, 1000);
    });
    return p;
}

//吃饭
function eat(data) {
    console.log('开始吃饭：' + data);
    var p = new Promise(function (resolve, reject) {        //做一些异步操作
        setTimeout(function () {
            console.log('吃饭完毕!');
            resolve('一块碗和一双筷子');
        }, 2000);
    });
    return p;
}

function wash(data) {
    console.log('开始洗碗：' + data);
    var p = new Promise(function (resolve, reject) {        //做一些异步操作
        setTimeout(function () {
            console.log('洗碗完毕!');
            resolve('干净的碗筷');
        }, 2000);
    });
    return p;
}

//正常写法
// cook()
//   .then(function (data) {
//     return eat(data);
//   })
//   .then(function (data) {
//     return wash(data);
//   })
//   .then(function (data) {
//     console.log(data);
//   });

//简化写法
cook()
.then(eat)
.then(wash)
.then(function (data) {
    console.log(data);
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;常用写法-reject&quot;&gt;常用写法 reject()&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//做饭
function cook() {
    console.log('开始做饭。');
    var p = new Promise(function (resolve, reject) {        //做一些异步操作
        setTimeout(function () {
            console.log('做饭失败！');
            reject('烧焦的米饭');
        }, 1000);
    });
    return p;
}

//吃饭
function eat(data) {
    console.log('开始吃饭：' + data);
    var p = new Promise(function (resolve, reject) {        //做一些异步操作
        setTimeout(function () {
            console.log('吃饭完毕!');
            resolve('一块碗和一双筷子');
        }, 2000);
    });
    return p;
}

cook()
.then(eat, function (data) {
    console.log(data + '没法吃!');
})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;catch-用法&quot;&gt;catch() 用法&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//做饭
function cook() {
    console.log('开始做饭。');
    var p = new Promise(function (resolve, reject) {        //做一些异步操作
        setTimeout(function () {
            console.log('做饭失败！');
            reject('烧焦的米饭');
        }, 1000);
    });
    return p;
}
//吃饭
function eat(data) {
    console.log('开始吃饭：' + data);
    var p = new Promise(function (resolve, reject) {        //做一些异步操作
        setTimeout(function () {
            console.log('吃饭完毕!');
            resolve('一块碗和一双筷子');
        }, 2000);
    });
    return p;
}
cook()
.then(eat)
.catch(function (data) {
    console.log(data + '没法吃!');
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;all-彼此异步-同时完成才会进行下一步&quot;&gt;all() 彼此异步 同时完成才会进行下一步&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//切菜
function cutUp() {
    console.log('开始切菜。');
    var p = new Promise(function (resolve, reject) {        //做一些异步操作
        setTimeout(function () {
            console.log('切菜完毕！');
            resolve('切好的菜');
        }, 1000);
    });
    return p;
}

//烧水
function boil() {
    console.log('开始烧水。');
    var p = new Promise(function (resolve, reject) {        //做一些异步操作
        setTimeout(function () {
            console.log('烧水完毕！');
            resolve('烧好的水');
        }, 1000);
    });
    return p;
}

Promise
.all([cutUp(), boil()])
.then(function (results) {
    console.log(&quot;准备工作完毕：&quot;);
    console.log(results);
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;race-彼此异步-只要有一个完成-就会进行下一步&quot;&gt;race() 彼此异步 只要有一个完成 就会进行下一步&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//切菜
function cutUp() {
    console.log('开始切菜。');
    var p = new Promise(function (resolve, reject) {        //做一些异步操作
        setTimeout(function () {
            console.log('切菜完毕！');
            resolve('切好的菜');
        }, 1000);
    });
    return p;
}

//烧水
function boil() {
    console.log('开始烧水。');
    var p = new Promise(function (resolve, reject) {        //做一些异步操作
        setTimeout(function () {
            console.log('烧水完毕！');
            resolve('烧好的水');
        }, 1000);
    });
    return p;
}

Promise
.race([cutUp(), boil()])
.then(function (results) {
    console.log(&quot;准备工作完毕：&quot;);
    console.log(results);
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;racey应用&quot;&gt;racey应用：&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
/**
* racey应用：
* 上面代码 requestImg 函数异步请求一张图片，timeout 函数是一个延时 5 秒的异步操作。我们将它们一起放在 race 中赛跑。
* 如果 5 秒内图片请求成功那么便进入 then 方法，执行正常的流程。
* 如果 5 秒钟图片还未成功返回，那么则进入 catch，报“图片请求超时”的信息。
*/
&amp;lt;!--function useRace(){--&amp;gt;
function requestImg() {
    var p = new Promise(function (resolve, reject) {
        var img = new Image();
        img.onload = function () {
            resolve(img);
        }
        img.src = 'xxxxxx';
    });
    return p;
}

//延时函数，用于给请求计时
function timeout() {
    var p = new Promise(function (resolve, reject) {
        setTimeout(function () {
            reject('图片请求超时');
        }, 5000);
    });
    return p;
}

Promise
.race([requestImg(), timeout()])
.then(function (results) {
    console.log(results);
})
.catch(function (reason) {
    console.log(reason);
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Fri, 29 Jun 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/promise</link>
				<guid isPermaLink="true">http://localhost:4000/promise</guid>
			</item>
		
			<item>
				<title>自定义组件、插件 和 wepy框架</title>
				<description>&lt;h3 id=&quot;自定义组件-component-注意事项&quot;&gt;自定义组件 Component 注意事项&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//页面json文件中 添加自己需要用到的自定义组件
{
    &quot;usingComponents&quot;:{
        &quot;test&quot;: &quot;../../component/test&quot;,
        &quot;login&quot;:&quot;../../component/login/login&quot;
    }
}

//页面wxml中使用 myevent自定义的监听事件的key值，triggerEvent中使用
&lt;span class=&quot;nt&quot;&gt;&amp;lt;login&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;canshu=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;canshu&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;我的标题&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bind:myevent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onMyEvent&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cancel&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;取消&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/login&amp;gt;&lt;/span&gt;

//组件中
options: {
    multipleSlots: true // 在组件定义时的选项中启用多slot支持
},
properties: {
    title:{
        type:String,
        value:&quot;标题&quot;,
        observer: function (newVal, oldVal, changedPath){
            console.log(newVal+&quot;,&quot;+oldVal+&quot;,&quot;+changedPath)&lt;span class=&quot;sb&quot;&gt;

        }
    },
    canshu: String,
&lt;/span&gt;},

methods: {
    loginClick:function(){
    
        console.log(&quot;loginClick&quot; + &quot; &quot; + this.properties.canshu)
        //用于回传事件给页面
        this.triggerEvent('myevent', { text:&quot;111&quot;})
    },
},&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;插件&quot;&gt;插件&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//plugin.json中 列出所有插件 index.js中暴露插件接口
{
    &quot;publicComponents&quot;: {
        &quot;list&quot;: &quot;components/list/list&quot;
    },
    &quot;main&quot;: &quot;index.js&quot;
}

//app.json中 写明版本号和插件的appid
&quot;plugins&quot;: {
    &quot;myPlugin&quot;: {
        &quot;version&quot;: &quot;dev&quot;,
        &quot;provider&quot;: &quot;wxd322cd2139b1914d&quot;
    }
}

//page的json文件中
{
    {
        &quot;usingComponents&quot;: {
        &quot;list&quot;: &quot;plugin://myPlugin/list&quot;
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wepy注意事项&quot;&gt;wepy注意事项&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//编辑器中改完代码，需要重新运行wepy build 命令

//wxss
&lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;less&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
//js
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
//wxml
&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
//json 是script 里面的 config
config = {
    navigationBarTitleText: 'test'
}

//手动创建页面，app.wpy中不会自己添加，需要手动添加 page/one
config = {
    pages: &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;
        'pages/index',
        'pages/one',
    ],
    window: {
        backgroundTextStyle: 'light',
    }
}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wepy初见&quot;&gt;wepy初见&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import wepy from 'wepy';
//Index 命名首字母一定要大写
export default class Index extends wepy.page{ }

//默认setData await使用
this.userInfo = await wepy.getUserInfo();
//异步执行的时候调用
this.$apply();

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;基础必记&quot;&gt;基础必记&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import wepy from 'wepy';

export default class MyPage extends wepy.page {
    // export default class MyComponent extends wepy.component {
    customData = {}  // 自定义数据

    customFunction ()　{}  //自定义方法

    onLoad () {}  // 在Page和Component共用的生命周期函数

    onShow () {}  // 只在Page中存在的页面生命周期函数

    config = {};  // 只在Page实例中存在的配置数据，对应于原生的page.json文件

    data = {};  // 页面所需数据均需在这里声明，可用于模板数据绑定

    components = {};  // 声明页面中所引用的组件，或声明组件中所引用的子组件

    mixins = [];  // 声明页面所引用的Mixin实例

    computed = {};  // 声明计算属性（详见后文介绍）

    watch = {};  // 声明数据watcher（详见后文介绍）

    methods = {};  
    /*
        声明页面wxml中标签的事件处理函数。
        注意，此处只用于声明页面wxml中标签的bind、catch事件
        自定义方法需以自定义方法的方式声明
    */

    events = {};  // 声明组件之间的事件处理函数
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;组件引用&quot;&gt;组件引用&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
import Child from '../components/child';
components = {
    //为两个相同组件的不同实例分配不同的组件ID，从而避免数据同步变化的问题
    child: Child,
    anotherchild: Child
};


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;循环&quot;&gt;循环&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- 注意，使用for属性，而不是使用wx:for属性 --&amp;gt;
&amp;lt;repeat for=&quot;&quot; key=&quot;index&quot; index=&quot;index&quot; item=&quot;item&quot;&amp;gt;
    &amp;lt;!-- 插入&amp;lt;script&amp;gt;脚本部分所声明的child组件，同时传入item --&amp;gt;
    &amp;lt;child :item=&quot;item&quot;&amp;gt;&amp;lt;/child&amp;gt;
&amp;lt;/repeat&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;计算属性-监听器-传值&quot;&gt;计算属性 监听器 传值&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 计算属性aPlus，在脚本中可通过this.aPlus来引用，在模板中可通过来插值
computed = {
    aPlus () {
        return this.a + 1
    }
}


// 监听器函数名必须跟需要被监听的data对象中的属性num同名，
data = {
    num: 1
}
// 其参数中的newValue为属性改变后的新值，oldValue为改变前的旧值
watch = {
    num (newValue, oldValue) {
        console.log(`num value: ${oldValue} -&amp;gt; ${newValue}`)
    }
}

//传值
props = {
    // 静态传值
    title: String,

    // 父向子单向动态传值
    syncTitle: {
        type: String,
        default: 'null'
    },

    twoWayTitle: {
        type: String,
        default: 'nothing',
        twoWay: true
    }
};

onLoad () {
    console.log(this.title); // p-title
    console.log(this.syncTitle); // p-title
    console.log(this.twoWayTitle); // p-title

    this.title = 'c-title';
    console.log(this.$parent.parentTitle); // p-title.
    this.twoWayTitle = 'two-way-title';
    this.$apply();
    
    // two-way-title. 
        twoWay为true时，子组件props中的属性值改变时，会同时改变父组件对应的值
    console.log(this.$parent.parentTitle); 
    
    this.$parent.parentTitle = 'p-title-changed';
    this.$parent.$apply();
    
    // 'c-title';
    console.log(this.title); 
    
    // 'p-title-changed' 
        有.sync修饰符的props属性值，当在父组件中改变时，会同时改变子组件对应的值。
    console.log(this.syncTitle); 
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;组件通信与交互&quot;&gt;组件通信与交互&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//$broadcast事件是由父组件发起，所有子组件都会收到
//父
this.$broadcast('fuviewclick','aaaaaaaa')
//子
events = {
    fuviewclick(e){
        console.log(e);
    }
};


//$emit 子组件发起 父组件收到
//子
test1click() {
    this.$emit('test1func', 'hehe');
},
//父
events = {
    test1func(){
        console.log(`other events func`);
    }
};

//$invoke 一个页面调用另一个页面的方法 或者 一个组件调用另一个组件的方法。
     此方法用的最多，因为页面和组件都能交互
//子一
testclick() {
    this.$invoke(&quot;../test2&quot;, 'test1click', 'haha');
}
//子二
methods = {
    //或者直接写在最外面 不能写在events中，不知道为什么
    test1click(e) {
        console.log(e);
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;组件自定义事件处理函数&quot;&gt;组件自定义事件处理函数&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.default: 绑定小程序冒泡型事件，如bindtap，.default后缀可省略不写；
.stop: 绑定小程序捕获型事件，如catchtap；
.user: 绑定用户自定义组件事件通过$emit触发。
//注意，如果用了自定义事件，则events中对应的监听函数不会再执行。

//定义
@customEvent.user=&quot;myFn&quot;
//触发
this.$emit('customEvent', 100) 
//实现
methods = {
    myFn (num, evt) {
        console.log('myFn received emit event, number is: ' + num)
    }
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;参数传递&quot;&gt;参数传递&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// WePY 1.1.8以后的版本，只允许传string。
&amp;lt;view @tap=&quot;tapName(, 'wepy', 'otherparams')&quot;&amp;gt; Click me! &amp;lt;/view&amp;gt;

methods: {
    tapName (id, title, other, event) {
        console.log(id, title, other)// output: 1, wepy, otherparams
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Wed, 06 Jun 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/Component</link>
				<guid isPermaLink="true">http://localhost:4000/Component</guid>
			</item>
		
			<item>
				<title>Swift常用传值方式</title>
				<description>&lt;h2 id=&quot;代理协议-protocol&quot;&gt;代理协议 protocol&lt;/h2&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public protocol DelegateViewDelegate : NSObjectProtocol{&lt;span class=&quot;sb&quot;&gt;

    func click(index:Int) -&amp;gt; Void
&lt;/span&gt;}

class DelegateView: UIView{&lt;span class=&quot;sb&quot;&gt;

    weak var mydelegate : DelegateViewDelegate?

    override init(frame: CGRect) {
        super.init(frame: frame)

        let view1 = UIView(frame: CGRect(x: 0, y: 0, 
            width: frame.size.width/2, height: frame.size.height))
        view1.backgroundColor = UIColor.blue
        view1.isUserInteractionEnabled = true
        view1.tag = 1000
        let tap1=UITapGestureRecognizer(target: self, action: #selector(view1Click))
        view1.addGestureRecognizer(tap1)
        self.addSubview(view1)

    }

    required init?(coder aDecoder: NSCoder) {
        fatalError(&quot;init(coder:) has not been implemented&quot;)
    }

    @objc func view1Click() -&amp;gt; Void {
        mydelegate?.click(index: 1)
    }

&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;block-闭包&quot;&gt;block 闭包&lt;/h2&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//可以定义block（闭包）类型
typealias myBlock = (Int) -&amp;gt; (Int)
//或者直接定义
var bibao:((Int) -&amp;gt; ())?

//定义页面调用
bibao!(1)&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//使用页面回调        
blockView?.bibao = {
    (a) in&lt;span class=&quot;sb&quot;&gt;

    print(a)
    
    //如果有返回值的话
    //return a+1
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;单利&quot;&gt;单利&lt;/h2&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//创建单利属性
static let danli = DanLi()
private override init(){}

//类方法返回单利
class func shared() -&amp;gt; DanLi {
    return danli
}

//官方推荐写法
static let sharedInstence:DanLi = {
    let danli = DanLi()&lt;span class=&quot;sb&quot;&gt;

    //danli.xxxxxx=xxxx
    //danli.function()

    return danli
&lt;/span&gt;}()

//属性
var name:String?

//方法
public func doSomthing() -&amp;gt; Void {
    print(&quot;------单利方法-----&quot;)
}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;let danli = DanLi.danli
let danli02 = DanLi.shared()&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;danli.name = &quot;danli-1&quot;
print(danli02.name!)

danli02.name = &quot;danli-2&quot;
print(danli.name!)&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;danli.doSomthing()
danli02.doSomthing()&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;kvo&quot;&gt;KVO&lt;/h2&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//定义

class MyKVO: NSObject {&lt;span class=&quot;sb&quot;&gt;

    @objc dynamic var name: String

    init(name: String) {
        self.name = name
    }
&lt;/span&gt;}

class MyKVO1: NSObject {&lt;span class=&quot;sb&quot;&gt;

    @objc dynamic var name: String

    override init() {
        self.name = &quot;&quot;
    }
&lt;/span&gt;}

//MARK: - 第一种KVO block回调。不用手动删除监听者
kvoClass = MyKVO(name: &quot;kvo&quot;)
ob = kvoClass.observe(&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;name) { (ob, changed) in
    let new = ob.name
    print(&quot;name changed: &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;new)&quot;)
}
kvoClass.name = &quot;swift4&quot;&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//MARK: - 第二种KVO 调用方法
kvoClass1 = MyKVO1()
kvoClass1.addObserver(self, forKeyPath: &quot;name&quot;, options: .new, context: &amp;amp;myContext)
kvoClass1.name = &quot;swift4&quot;

override func observeValue(forKeyPath keyPath: String?, of object: Any?, 
    change: &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NSKeyValueChangeKey : Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;?, context: UnsafeMutableRawPointer?) {&lt;span class=&quot;sb&quot;&gt;

    if context == &amp;amp;myContext {
        if let newValue = change?[NSKeyValueChangeKey.newKey] {
            print(&quot;name changed: \(newValue)&quot;)
        }
    } else {
        super.observeValue(forKeyPath: keyPath, of: object, change: change,
            context: context)
    }
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;通知&quot;&gt;通知&lt;/h2&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

//发送通知
let notificationName =  NSNotification.Name(rawValue: &quot;MyNotification&quot;)
NotificationCenter.default.post(name: notificationName, object: self, 
    userInfo: &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;value1&quot;:&quot;11&quot;,&quot;value2&quot;:22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;)&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;//接收通知
let notificationName = Notification.Name(rawValue: &quot;MyNotification&quot;)
NotificationCenter.default.addObserver(self, selector: #selector(
    receiveNotification(notification:)), name: notificationName, object: nil)

@objc func receiveNotification(notification: Notification) -&amp;gt; Void {&lt;span class=&quot;sb&quot;&gt;

    let userInfo = notification.userInfo as! [String: AnyObject]
    
    print(userInfo)
    
    let value1 = userInfo[&quot;value1&quot;] as! String
    let value2 = userInfo[&quot;value2&quot;] as! Int
    print(value1)
    print(value2)
    
    sleep(3)
    
    print(&quot;执行完毕&quot;)
    
&lt;/span&gt;}
    
deinit {
    //记得移除通知监听
    NotificationCenter.default.removeObserver(self)
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;userdefaults&quot;&gt;userDefaults&lt;/h2&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
let userDefaults = UserDefaults.standard

//存
userDefaults.set(&quot;一条数据&quot;, forKey: &quot;key&quot;)
//取
let value = userDefaults.value(forKey: &quot;key&quot;) as? String
//删
userDefaults.removeObject(forKey: &quot;key&quot;)&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;常用的几种传值方式&lt;/p&gt;

</description>
				<pubDate>Wed, 25 Apr 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/Swift-use</link>
				<guid isPermaLink="true">http://localhost:4000/Swift-use</guid>
			</item>
		
			<item>
				<title>快应用入门 与 常见问题</title>
				<description>&lt;p&gt;快应用出来好几天啦，今天才有时间好好看看，这里是&lt;a href=&quot;https://doc.quickapp.cn&quot;&gt;官方文档&lt;/a&gt;。环境搭建按照文档上说的来，但是他们要求安装6.0以上版本的NodeJS，又不能高于8.0版本，因为我是老早以前就安装了NodeJS，9.9的版本，也懒得降版本了，就凑活着用吧。&lt;/p&gt;

&lt;p&gt;安装hap-toolkit&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//创建项目
npm install -g hap-toolkit

//查看版本
hap -V

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;环境配置好，创建项目&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//创建项目
hap init Hello
//安装依赖
npm install

//编译出错
npm run build

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;错误提示&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gt&quot;&gt;
&amp;gt; Hello@1.0.0 build /Users/wanglizhen/Desktop/19Lou/qkapp/Hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; cross-env NODE_PLATFORM=na NODE_PHASE=dv webpack&lt;/span&gt;
    --config ./node_modules/hap-tools/webpack.config.js

module.js:545
throw err;
^

Error: Cannot find module '/Users/wanglizhen/Desktop/19Lou/qkapp/
    Hello/node_modules/hap-tools/webpack.config.js'
at Function.Module._resolveFilename (module.js:543:15)
at Function.Module._load (module.js:470:25)
at Module.require (module.js:593:17)
at require (internal/module.js:11:18)
at module.exports (/Users/wanglizhen/Desktop/19Lou/qkapp/
    Hello/node_modules/webpack/bin/convert-argv.js:80:13)
at Object.&lt;span class=&quot;nt&quot;&gt;&amp;lt;anonymous&amp;gt;&lt;/span&gt; (/Users/wanglizhen/Desktop/19Lou/qkapp/
    Hello/node_modules/webpack/bin/webpack.js:39:40)
at Module._compile (module.js:649:30)
at Object.Module._extensions..js (module.js:660:10)
at Module.load (module.js:561:32)
at tryModuleLoad (module.js:501:12)
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! Hello@1.0.0 build: &lt;span class=&quot;sb&quot;&gt;`cross-env NODE_PLATFORM=na NODE_PHASE=dv webpack
    --config ./node_modules/hap-tools/webpack.config.js`&lt;/span&gt;
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the Hello@1.0.0 build script.
npm ERR! This is probably not a problem with npm.
    There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/wanglizhen/.npm/_logs/2018-03-26T02_43_53_924Z-debug.log&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决方案：我看了下错误原因 发现项目下面缺少/node_modules/hap-tools/webpack.config.js文件，我进入目录查看了一下，原来连hap-tools目录都没有，于是我就手动装了一下&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
npm install hap-tools

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//再编译&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
npm run build

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//通过&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gt&quot;&gt;
&amp;gt; hello@1.0.0 build /Users/wanglizhen/Desktop/19Lou/qkapp/hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; cross-env NODE_PLATFORM=na NODE_PHASE=dv webpack&lt;/span&gt;
    --config ./node_modules/hap-tools/webpack.config.js

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 配置环境：{&quot;NODE_PLATFORM&quot;:&quot;na&quot;,&quot;NODE_PHASE&quot;:&quot;dv&quot;}
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; Build Time Cost: NaNs
Hash: 6965d809aaa352821c8f
Time: 1437ms
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; 15 hidden modules
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Loader ### 编译完成, 生成压缩包
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Loader ### 压缩包加签名
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Loader ### 自动刷新执行build :
&lt;span class=&quot;gt&quot;&gt;&amp;gt; hello@1.0.0 notify /Users/wanglizhen/Desktop/19Lou/qkapp/hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; node ./node_modules/hap-tools/debugger/command/notify.js&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//启动HTTP服务器&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
npm run server

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;//搞定了&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gt&quot;&gt;
&amp;gt; hello@1.0.0 server /Users/wanglizhen/Desktop/19Lou/qkapp/hello&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; cross-env NODE_MOUNTED_ROUTER=&quot;debug bundle&quot;&lt;/span&gt;
node ./node_modules/hap-tools/debugger/server/index.js

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Server ### server started at http://localhost:12306/
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; ### App Server ### 请确保手机与App Server处于相同网段

生成HTTP服务器的二维码: http://172.16.115.231:12306
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
█ ▄▄▄▄▄ █▄▀▀▄▄█▄█ █ ▄▄▄▄▄ █
█ █   █ ███▄█  ▀▄██ █   █ █
█ █▄▄▄█ ██▄▀▄▀▀████ █▄▄▄█ █
█▄▄▄▄▄▄▄█ █ ▀▄▀ █▄█▄▄▄▄▄▄▄█
█  █▄ ▀▄██ ▄▄ ██ ▀▀▄█▀▀▀▀▄█
█▀ ▄█▀█▄  ▀ ▄▄▄ ▄  ▄ █ ▀▀ █
█ ▀▄▄▀▀▄█  █ ▀▀▄ █▄▄▀▀██▀▄█
█ ▄▀▄▀ ▄▄  ▀█ ▄█ ▄▄██▀▄ ▄ █
█▄█▄█▄▄▄▄▀▄█▄▀  █ ▄▄▄ █▄ ██
█ ▄▄▄▄▄ ██▄▀ ▀▀ █ █▄█ ▄█▀▄█
█ █   █ █ █▀▀▀██▄▄▄  ▄ █▀▀█
█ █▄▄▄█ █▀ ▄▄ █ ▀█▀▀▀ █   █
█▄▄▄▄▄▄▄█▄██▄██▄▄▄█▄██▄██▄█

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面就可以专心的的研究代码了&lt;/p&gt;

</description>
				<pubDate>Mon, 26 Mar 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/qkapp</link>
				<guid isPermaLink="true">http://localhost:4000/qkapp</guid>
			</item>
		
			<item>
				<title>基于CTMediator解耦</title>
				<description>&lt;p&gt;CTMediator 模块化开发用的还是比较多的，网上教程和讲解也是非常多的，我就不班门弄斧了，也不详细讲解原理了，只是简单记录一下样式和使用&lt;/p&gt;

&lt;h3 id=&quot;首先-创建target-action---继承自-nsobject-就行&quot;&gt;首先 创建Target-Action   继承自 NSObject 就行&lt;/h3&gt;

&lt;p&gt;Target_XXXXXX    这里的 XXXXXX 最好有意义，后面需要通过传入Target 的XXXXXX代码决定进入Target_XXXXXX类中执行方法，比如我下面的 Target_Home 是说这是首页的接口处理&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.h文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;

@interface Target_Home : NSObject

//获取首页对象
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_HomeViewController:(NSDictionary *&lt;/span&gt;)params;
//刷新首页方法
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)Action_refreshUpdate:(NSDictionary &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)params;

//获取另外页面对象
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_SecondViewController:(NSDictionary *&lt;/span&gt;)params;

@end&lt;span class=&quot;sb&quot;&gt;






&lt;/span&gt;.m文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &quot;Target_Home.h&quot;&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;#import &quot;HomeViewController.h&quot;&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;#import &quot;SecondViewController.h&quot;&lt;/span&gt;

@implementation Target_Home
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_HomeViewController:(NSDictionary *&lt;/span&gt;)params{
    HomeViewController &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;homeVC = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HomeViewController sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    return homeVC;
}
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)Action_refreshUpdate:(NSDictionary &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)params{
    HomeViewController &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;homeVC = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HomeViewController sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;homeVC refreshUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)Action_SecondViewController:(NSDictionary *&lt;/span&gt;)params{&lt;span class=&quot;sb&quot;&gt;

    SecondViewController *SecondVC = [[SecondViewController alloc] init];
    //参数
    SecondVC.sId = [params objectForKey:@&quot;sId&quot;];
    return SecondVC;
&lt;/span&gt;}

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;创建-ctmediator-的分类&quot;&gt;创建 CTMediator 的分类&lt;/h3&gt;

&lt;p&gt;action 传入要执行的方法名 target中的方法名 都是以action为前缀的，这里的action前缀可以修改，这里不做过多解释&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.h文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &quot;CTMediator.h&quot;&lt;/span&gt;

@interface CTMediator (HomeComponent)
/&lt;span class=&quot;ge&quot;&gt;**&lt;/span&gt;
paramters 参数以字典样式传入
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
-(UIViewController&lt;span class=&quot;ge&quot;&gt;*)home_homeViewControllerWithParamters:(NSDictionary*&lt;/span&gt;)paramters;

/&lt;span class=&quot;ge&quot;&gt;**&lt;/span&gt;
刷新方法
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)home_refreshUpdate;

/&lt;span class=&quot;ge&quot;&gt;**&lt;/span&gt;
paramters 参数写清楚 必要参数和非必要参数
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;/
-(UIViewController&lt;span class=&quot;ge&quot;&gt;*)home_SecondViewControllerWithParamters:(NSDictionary*&lt;/span&gt;)paramters;

@end&lt;span class=&quot;sb&quot;&gt;







&lt;/span&gt;.m文件中&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;gh&quot;&gt;#import &quot;CTMediator+HomeComponent.h&quot;&lt;/span&gt;

@implementation CTMediator (HomeComponent)
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)home_homeViewControllerWithParamters:(NSDictionary *&lt;/span&gt;)paramters{
    return &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;self performTarget:@&quot;Home&quot;
    action:@&quot;HomeViewController&quot; params:paramters shouldCacheTarget:NO];
}
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)home_refreshUpdate{
    &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;self performTarget:@&quot;Home&quot;
    action:@&quot;refreshUpdate&quot; params:nil shouldCacheTarget:NO];
}
&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; (UIViewController &lt;span class=&quot;ge&quot;&gt;*)home_SecondViewControllerWithParamters:(NSDictionary *&lt;/span&gt;)paramters{&lt;span class=&quot;sb&quot;&gt;

    return [self performTarget:@&quot;Home&quot;
    action:@&quot;SecondViewController&quot; params:paramters shouldCacheTarget:NO];
&lt;/span&gt;}

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;最终使用&quot;&gt;最终使用&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;gh&quot;&gt;#import &quot;CTMediator+HomeComponent.h&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; (void)bButtonClick:(UIButton &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;)sender {
    UIViewController &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;viewController = &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[CTMediator sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    home_homeViewControllerWithParamters:@{@&quot;home_id&quot;:@&quot;123456&quot;}];
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self.navigationController pushViewController:viewController animated:YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用的好处 就是不用在各处包含#import “XXXX.h” 实现所有页面间的方法 通过路由层间接调用 实现解耦&lt;/p&gt;

</description>
				<pubDate>Sat, 24 Mar 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/iOS-target-action</link>
				<guid isPermaLink="true">http://localhost:4000/iOS-target-action</guid>
			</item>
		
			<item>
				<title>获取手机信息，节点位置，去除button样式 等常用操作</title>
				<description>&lt;h3 id=&quot;获取手机信息&quot;&gt;获取手机信息&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
wx.getSystemInfo({  
    success: function(res) {  
    console.log(res.model)  
    console.log(res.pixelRatio)  
    console.log(res.windowWidth)  
    console.log(res.windowHeight)  
    console.log(res.language)  
    console.log(res.version)  
    }  
})  

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;小程序获取-节点位置信息和滚动&quot;&gt;小程序获取 节点位置信息和滚动&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
var bindId = event.currentTarget.dataset.bindid;
var query = wx.createSelectorQuery()
    query.select('#scrollView' + bindId).boundingClientRect()
    query.exec(function (res) {
        wx.pageScrollTo({ //小程序滚动程序
        scrollTop: res&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;.top //距离现在定位的距离
    })
})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;button-去除原有样式&quot;&gt;button 去除原有样式&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 改样式
button{
    width: 100%;
    height: 100rpx;
    color: darkorange;
    text-align: left;
    background: #FFF; 
}
//　去边框
button::after{
    border: none;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;image自定义弹窗icon&quot;&gt;image自定义弹窗icon&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
wx.showToast({
    title: '成功',
    icon: 'success',
    image: '../image/warn.png',
    duration: 2000
})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;数组去空&quot;&gt;数组去空&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
for(var i = 0; i &amp;lt; array.length;i++){
    var obj = array&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    if (obj==null||obj==undefined){
        array.splice(i, 1)    
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;

&lt;p&gt;小程序的bug还是有点多的。textarea 下方有布局，弹起之后又可能会被键盘遮挡。placeholder 在键盘收起的时候，可能不会收回，发生错位。video、textarea 层级都是最高，不能通过z-index改变，不能用在scroll-view等视图中使用，video滑动会遮挡所有下面的视图。&lt;/p&gt;

</description>
				<pubDate>Wed, 14 Mar 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/js_wx_video</link>
				<guid isPermaLink="true">http://localhost:4000/js_wx_video</guid>
			</item>
		
			<item>
				<title>创建自己的Pods库</title>
				<description>&lt;p&gt;我们把自己的代码，全部分模块创建为了一个个库，为了模块化开发，后来发现，模块化开发真是好处多多，下一篇讲一下，模块化开发吧，这两片文章均摘自网络。本人怕原博主删掉博客或者因为网站原因找不到，特在此做了一个简单拷贝 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;amp;mid=2652551137&amp;amp;idx=3&amp;amp;sn=5a6a162a41c54be12b51c0390715c063&amp;amp;chksm=bcd2f2ef8ba57bf95f03ee0cec37516c091d80f1adaf875c98613acc34d9972c240d5a159823&amp;amp;mpshare=1&amp;amp;scene=23&amp;amp;srcid=0822HLLoDepjHMsV9bP1R468#rd&quot;&gt;原文出处&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建存储-podspec-后缀文件的-git-仓库&quot;&gt;创建存储 .podspec 后缀文件的 Git 仓库。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/01.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;记录第一个地址&quot;&gt;记录第一个地址。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/02.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建第二个用于存储代码的-git-仓库&quot;&gt;创建第二个用于存储代码的 Git 仓库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/03.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;记录第二个地址&quot;&gt;记录第二个地址。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/04.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;打开终端-到桌面&quot;&gt;打开终端 到桌面。&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
cd Desktop/

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;然后输入-pod-lib-create-lib-命令创建一个待上传的-lib-模版&quot;&gt;然后输入 pod lib create Lib 命令创建一个待上传的 Lib 模版&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod lib create Lib

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;然后输入邮箱&quot;&gt;然后输入邮箱&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
What is your email?

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;按找提示填写基础信息应该不用每个都解释了吧&quot;&gt;按找提示填写基础信息（应该不用每个都解释了吧）。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/05.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;完成之后-就可以在finder中看到如下&quot;&gt;完成之后 就可以在Finder中看到如下。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/06.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;配置-podspec-后缀文件&quot;&gt;配置 .podspec 后缀文件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/07.png&quot; alt=&quot;创建存储&quot; /&gt;
注意需要修改的地方一般有&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
s.version :  版本号(需跟后面打 Tag 的值相等)
s.summary : 描述(这个如果不修改，后面会出现问题。简单修改，不能超过 s.description 的文字长度，不然也会出问题)
s.homepage : 项目主页（第二个地址 去掉.git）
s.source : Git 仓库地址（第二个地址）
s.ios.deployment_target : 项目最低支持版本
s.source_files : 共享的代码目录
s.frameworks : 所依赖的系统库
s.dependency : 所依赖的第三方库

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;验证&quot;&gt;验证&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod lib lint

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;结果有两个警告 验证失败
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/08.png&quot; alt=&quot;创建存储&quot; /&gt;
于是我忽略了警告 重新验证 验证通过
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/09.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;上传远程仓库&quot;&gt;上传远程仓库&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//链接远程仓库
git remote add origin 第二个地址
//更新本地。（文件有冲突自己解决）
git pull origin master --allow-unrelated-histories

git add .
git commit -m 'Lib commit'
git push origin master

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;上传成功-查看&quot;&gt;上传成功 查看&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/10.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;验证文件有效性&quot;&gt;验证文件有效性&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod spec lint

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;发现tag值不对应
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/11.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同步tag值&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
git tag -a 0.1.0 -m '0.1.0标签'
git push origin master --tags

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同步成功
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/12.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其实也可以在这边后台手动添加tag
&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/13.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;上传podspec到第一个远程仓库&quot;&gt;上传.podspec到第一个远程仓库&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod repo add MyPodspec 第一个创建的git仓库地址&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;查看本地库&quot;&gt;查看本地库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/14.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;向-mypodspec-远程仓库中提交-podspec-成功&quot;&gt;向 MyPodspec 远程仓库中提交 .podspec 成功&lt;/h3&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod repo push MyPodspec Lib.podspec

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/my_pod/15.png&quot; alt=&quot;创建存储&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;可以用了-查一下试试&quot;&gt;可以用了 查一下试试&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pod search Lib&lt;span class=&quot;sb&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;结果真是日了狗了搜出来一大堆的库想偷懒一下起了这个名字最终还是把自己给坑到了&quot;&gt;结果真是日了狗了！！搜出来一大堆的库！！！想偷懒一下起了这个名字，最终还是把自己给坑到了。。。。。。&lt;/h2&gt;

</description>
				<pubDate>Fri, 23 Feb 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/my-pod</link>
				<guid isPermaLink="true">http://localhost:4000/my-pod</guid>
			</item>
		
	</channel>
</rss>
